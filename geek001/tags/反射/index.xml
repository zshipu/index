<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>反射 on 知识铺的博客</title>
    <link>https://index.zshipu.com/geek001/tags/%E5%8F%8D%E5%B0%84/</link>
    <description>Recent content in 反射 on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 30 Jul 2024 11:34:08 +0000</lastBuildDate>
    <atom:link href="https://index.zshipu.com/geek001/tags/%E5%8F%8D%E5%B0%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java反射的四个作用 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240723/Java%E5%8F%8D%E5%B0%84%E7%9A%84%E5%9B%9B%E4%B8%AA%E4%BD%9C%E7%94%A8--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Tue, 30 Jul 2024 11:34:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240723/Java%E5%8F%8D%E5%B0%84%E7%9A%84%E5%9B%9B%E4%B8%AA%E4%BD%9C%E7%94%A8--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>反射是编程语言中的一项关键技术，它使得程序能够在执行过程中进行自省，即能够访问和操作其自身的结构和行为。在Java语言中，反射机制允许开发者在运行时获取对象的类信息，进而对对象的属性和方法进行操作。这不仅增加了程序的灵活性，也为动态加载类、调用方法等提供了可能。例如，使用getC</description>
    </item>
    <item>
      <title>Java 反射机制概述 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240505/Java-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E6%A6%82%E8%BF%B0--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Mon, 06 May 2024 02:10:32 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240505/Java-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E6%A6%82%E8%BF%B0--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>Java 反射是一种强大的机制，允许在运行时检查类、方法、字段等信息，并在运行时动态地调用类的方法、操作字段等。通过反射，可以在编译时未知的情况下操作类的成员。 反射的核心类是 java.lang.reflect 包中的 Class 类，它提供了许多方法来获取类的信息，例如获取类的构造函数、字段和方法等。通过 Class 类的实例，可以获取类的构造</description>
    </item>
  </channel>
</rss>
