<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CAS on 知识铺的博客</title>
    <link>https://index.zshipu.com/geek001/tags/Cas/</link>
    <description>Recent content in CAS on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 06 May 2024 01:57:32 +0000</lastBuildDate>
    <atom:link href="https://index.zshipu.com/geek001/tags/Cas/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CAS与FAA在多线程应用程序中的线程安全保证 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240505/CAS%E4%B8%8EFAA%E5%9C%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%BF%9D%E8%AF%81--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Mon, 06 May 2024 01:57:32 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240505/CAS%E4%B8%8EFAA%E5%9C%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%BF%9D%E8%AF%81--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>介绍 CAS 和 FAA 的定义 CAS（比较和交换）和 FAA（获取和添加）是原子操作，旨在确保多线程应用程序中的线程安全和同步。 CAS 允许将变量的值与预期值进行比较，并在比较成功时对其进行原子更新。FAA 提供变量的原子增量或递减，使其成为计数器和聚合器的理想选择。 原子操作重要性的证明 原子操作在多线程</description>
    </item>
    <item>
      <title>CAS与FAA：原子操作在多线程应用程序中的重要性 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240505/CAS%E4%B8%8EFAA%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E5%9C%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 07:12:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240505/CAS%E4%B8%8EFAA%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E5%9C%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>介绍 CAS 和 FAA 的定义 CAS（比较和交换）和 FAA（获取和添加）是原子操作，旨在确保多线程应用程序中的线程安全和同步。 CAS 允许将变量的值与预期值进行比较，并在比较成功时对其进行原子更新。FAA 提供变量的原子增量或递减，使其成为计数器和聚合器的理想选择。 原子操作重要性的证明 原子操作在多线程</description>
    </item>
    <item>
      <title>Springboot集成Cas客户端示例 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/Springboot%E9%9B%86%E6%88%90Cas%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%A4%BA%E4%BE%8B--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 07:06:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/Springboot%E9%9B%86%E6%88%90Cas%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%A4%BA%E4%BE%8B--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>按照上篇的cas服务端的配置一样，集成shiro+pac4j，其实在1.3还是1.2shiro-cas就过期了，shiro官方也让我们集成pac4j，但是居然居然没有demo，我也是服，，。。 此篇博客将集成springboot+cas5+shiro+pac4j 集成在一起，是宝宝将</description>
    </item>
    <item>
      <title>配置CAS登录验证 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/%E9%85%8D%E7%BD%AECAS%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 07:05:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/%E9%85%8D%E7%BD%AECAS%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>现在咱们开发环境搭好了就一切好办了 只需要增加两个类，修改两个配置文件就ok了 第一个类，登录验证类 类里面用到了 com.mysql.jdbc.Driver，所以你们懂得，记得在pom里面加入对mysql驱动的依赖，上一篇里提到过了 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27</description>
    </item>
    <item>
      <title>SpringBoot集成CAS&#43;Shiro&#43;Pac4j --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/SpringBoot%E9%9B%86%E6%88%90CAS&#43;Shiro&#43;Pac4j--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 07:04:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/SpringBoot%E9%9B%86%E6%88%90CAS&#43;Shiro&#43;Pac4j--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>先说下项目背景，公司的项目原来用的kisso+shiro，但是kisso太小众了，性能各方面也不满足要求，所以老大要更换springboot+cas+shiro+pac4j集成，楼主在资料极少的情况下弄了很久还是没配置好shiro+pac4j，项目老大奋斗到深夜给解决了，所以写一</description>
    </item>
    <item>
      <title>Spring Boot项目集成Shiro和CAS时认证失败问题解决 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/Spring-Boot%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90Shiro%E5%92%8CCAS%E6%97%B6%E8%AE%A4%E8%AF%81%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 07:01:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/Spring-Boot%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90Shiro%E5%92%8CCAS%E6%97%B6%E8%AE%A4%E8%AF%81%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>项目场景： 项目采用spring boot+shiro+cas配置，由于数据库原因，登录时认证失败，记录一下解决过程。 问题描述： cas验证用户成功后，到shiro自定义的realm中执行doGetAuthenticationInfo方法时，抛出NullPointerException</description>
    </item>
    <item>
      <title>Spring Boot集成CAS&#43;Shiro&#43;Pac4j实现单点登录和权限管理 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/Spring-Boot%E9%9B%86%E6%88%90CAS&#43;Shiro&#43;Pac4j%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 07:00:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/Spring-Boot%E9%9B%86%E6%88%90CAS&#43;Shiro&#43;Pac4j%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>先说下项目背景，公司的项目原来用的kisso+shiro，但是kisso太小众了，性能各方面也不满足要求，所以老大要更换springboot+cas+shiro+pac4j集成，楼主在资料极少的情况下弄了很久还是没配置好shiro+pac4j，项目老大奋斗到深夜给解决了，所以写一</description>
    </item>
    <item>
      <title>Spring Boot 2.0 集成 Shiro 和 Pac4j CAS 单点登录配置教程 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/Spring-Boot-2.0-%E9%9B%86%E6%88%90-Shiro-%E5%92%8C-Pac4j-CAS-%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:59:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/Spring-Boot-2.0-%E9%9B%86%E6%88%90-Shiro-%E5%92%8C-Pac4j-CAS-%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>一、CAS简介 CAS 是 Central Authentication Service 的缩写 —— 中央认证服务，一种独立开放指令协议，是 Yale 大学发起的一个企业级开源项目，旨在为 Web 应用系统提供一种可靠的 SSO 解决方案。 CAS 支持以下特性： CAS v1, v2 和 v3 协议 SAML v1 和 v2 协议 OAuth v2 协议 OpenID &amp;amp; OpenID Connect 协议 WS-Federation Passive Requestor 协议 通过 JAAS, LDAP, RDBMS, X.509, Radius, SPNEGO, JWT, Remote, Trusted, BASIC, Apache Shiro, MongoDb, Pac4J 等组件进行身份验证 将身份验证委</description>
    </item>
    <item>
      <title>SpringBoot集成CAS单点登录实践 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/SpringBoot%E9%9B%86%E6%88%90CAS%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E5%AE%9E%E8%B7%B5--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:58:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/SpringBoot%E9%9B%86%E6%88%90CAS%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E5%AE%9E%E8%B7%B5--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>前言：接上一篇，已经搭建好cas服务器，现在开始集成springboot客户端，由于使用的框架是开源热门springboot项目bootdo，这里直接用bootdo作演示，另外提供一个简单的springboot的demo用作参考。 1.导入所需maven包 1 2 3 4 5 6 7 8 9 10 11 12 13</description>
    </item>
    <item>
      <title>CAS集成Shiro的配置方法 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/CAS%E9%9B%86%E6%88%90Shiro%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:56:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/CAS%E9%9B%86%E6%88%90Shiro%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>由于工作上的要求所以一直在寻找一些符合要求的集成方法，虽然不是自己发现的，但是有些问题经过研究更正。 1、配置web.xml 由于CAS的一个子系统Logout以后其他子系统并没有同步退出，所以这里面加入了，cas官方的集成监听器和过滤器 &amp;amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;amp;gt; &amp;amp;lt;web-app xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns=&amp;#34;http://xmlns.jcp.org/xml/ns/javaee&amp;#34; xsi:schemaLocation=&amp;#34;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&amp;#34; version=&amp;#34;3.1&amp;#34;&amp;amp;gt; &amp;amp;lt;display-name&amp;amp;gt;Struts Blank&amp;amp;lt;/display-name&amp;amp;gt; &amp;amp;lt;context-param&amp;amp;gt; &amp;amp;lt;param-name&amp;amp;gt;contextConfigLocation&amp;amp;lt;/param-name&amp;amp;gt; &amp;amp;lt;param-value&amp;amp;gt; classpath:spring-mvc.xml &amp;amp;lt;/param-value&amp;amp;gt; &amp;amp;lt;/context-param&amp;amp;gt; &amp;amp;lt;servlet&amp;amp;gt; &amp;amp;lt;servlet-name&amp;amp;gt;UploadHandleServlet&amp;amp;lt;/servlet-name&amp;amp;gt; &amp;amp;lt;servlet-class&amp;amp;gt;me.gacl.web.controller.UploadHandleServlet&amp;amp;lt;/servlet-class&amp;amp;gt; &amp;amp;lt;/servlet&amp;amp;gt; &amp;amp;lt;servlet-mapping&amp;amp;gt; &amp;amp;lt;servlet-name&amp;amp;gt;UploadHandleServlet&amp;amp;lt;/servlet-name&amp;amp;gt;</description>
    </item>
    <item>
      <title>使用CAS自带的监听器和过滤器实现单点登出 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/%E4%BD%BF%E7%94%A8CAS%E8%87%AA%E5%B8%A6%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%87%BA--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:54:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/%E4%BD%BF%E7%94%A8CAS%E8%87%AA%E5%B8%A6%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%87%BA--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>是一只不会游泳的鱼 于 2019-05-22 11:03:11 发布 现在做东西发现shiro集成以后单点登出各个子系统不能同步，比如A系统登出了，cas也是登出状态，但是输入B系统的url以后还是可以访问。 可以不使用shiro所带的配置，不加入下图中的配置 而是在web.xml文件中加入cas自带的logout的监听器和</description>
    </item>
    <item>
      <title>记录一个简单的单点登录的实现 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E7%9A%84%E5%AE%9E%E7%8E%B0--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:52:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E7%9A%84%E5%AE%9E%E7%8E%B0--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>VIP文章 H阿布 于 2018-02-01 18:22:35 发布 在pac4j探索的上一篇文章大致讲述了一下buji-pac4j+CAS的认证流程。这里记录一下本人实现的最简单的单点登录，仅作为笔记、学习交流之用，戳这里获取本文源码。 一、项目框架 1、 buji-pac4j（v.3.0.0） 2、shiro (v.1.4.0) 3、spring</description>
    </item>
    <item>
      <title>使用buji-pac4j和CAS实现单点登录 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/%E4%BD%BF%E7%94%A8buji-pac4j%E5%92%8CCAS%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:50:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/%E4%BD%BF%E7%94%A8buji-pac4j%E5%92%8CCAS%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>VIP文章 H阿布 于 2018-02-01 18:22:35 发布 在pac4j探索的上一篇文章大致讲述了一下buji-pac4j+CAS的认证流程。这里记录一下本人实现的最简单的单点登录，仅作为笔记、学习交流之用，戳这里获取本文源码。 一、项目框架 1、 buji-pac4j（v.3.0.0） 2、shiro (v.1.4.0) 3、spring</description>
    </item>
    <item>
      <title>Shiro整合CAS单点登录配置 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/Shiro%E6%95%B4%E5%90%88CAS%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E9%85%8D%E7%BD%AE--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:49:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/Shiro%E6%95%B4%E5%90%88CAS%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E9%85%8D%E7%BD%AE--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>引入依赖 &amp;amp;lt;dependencies&amp;amp;gt; &amp;amp;lt;!-- shiro-spring --&amp;amp;gt; &amp;amp;lt;dependency&amp;amp;gt; &amp;amp;lt;groupId&amp;amp;gt;org.apache.shiro&amp;amp;lt;/groupId&amp;amp;gt; &amp;amp;lt;artifactId&amp;amp;gt;shiro-spring&amp;amp;lt;/artifactId&amp;amp;gt; &amp;amp;lt;/dependency&amp;amp;gt; &amp;amp;lt;!-- buji-pac4j --&amp;amp;gt; &amp;amp;lt;dependency&amp;amp;gt; &amp;amp;lt;groupId&amp;amp;gt;io.buji&amp;amp;lt;/groupId&amp;amp;gt; &amp;amp;lt;artifactId&amp;amp;gt;buji-pac4j&amp;amp;lt;/artifactId&amp;amp;gt; &amp;amp;lt;version&amp;amp;gt;4.1.0&amp;amp;lt;/version&amp;amp;gt; &amp;amp;lt;/dependency&amp;amp;gt; &amp;amp;lt;!-- shiro-cas --&amp;amp;gt; &amp;amp;lt;dependency&amp;amp;gt; &amp;amp;lt;groupId&amp;amp;gt;org.pac4j&amp;amp;lt;/groupId&amp;amp;gt; &amp;amp;lt;artifactId&amp;amp;gt;pac4j-cas&amp;amp;lt;/artifactId&amp;amp;gt; &amp;amp;lt;version&amp;amp;gt;3.6.1&amp;amp;lt;/version&amp;amp;gt; &amp;amp;lt;/dependency&amp;amp;gt; &amp;amp;lt;/dependencies&amp;amp;gt; 配置web.xml文件 &amp;amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;amp;gt; &amp;amp;lt;web-app xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns=&amp;#34;http://java.sun.com/xml/ns/javaee&amp;#34; xsi:schemaLocation=&amp;#34;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&amp;#34; version=&amp;#34;3.0&amp;#34;&amp;amp;gt; &amp;amp;lt;!-- 配置单点退出过滤器 --&amp;amp;gt; &amp;amp;lt;filter&amp;amp;gt; &amp;amp;lt;filter-name&amp;amp;gt;ssoutFilter&amp;amp;lt;/filter-name&amp;amp;gt; &amp;amp;lt;filter-class&amp;amp;gt;org.jasig.cas.client.session.SingleSignOutFilter&amp;amp;lt;/filter-class&amp;amp;gt; &amp;amp;lt;!-- 配置CAS服务URL前缀 --&amp;amp;gt; &amp;amp;lt;init-param&amp;amp;gt; &amp;amp;lt;param-name&amp;amp;gt;casServerUrlPrefix&amp;amp;lt;/param-name&amp;amp;gt; &amp;amp;lt;param-value&amp;amp;gt;http://sso.pinyougou.com&amp;amp;lt;/param-value&amp;amp;gt; &amp;amp;lt;/init-param&amp;amp;gt; &amp;amp;lt;/filter&amp;amp;gt; &amp;amp;lt;filter-mapping&amp;amp;gt; &amp;amp;lt;filter-name&amp;amp;gt;ssoutFilter&amp;amp;lt;/filter-name&amp;amp;gt; &amp;amp;lt;url-pattern&amp;amp;gt;/*&amp;amp;lt;/url-pattern&amp;amp;gt; &amp;amp;lt;/filter-mapping&amp;amp;gt; &amp;amp;lt;!-- 配置Spring核心监听器 --&amp;amp;gt; &amp;amp;lt;context-param&amp;amp;gt; &amp;amp;lt;param-name&amp;amp;gt;contextConfigLocation&amp;amp;lt;/param-name&amp;amp;gt; &amp;amp;lt;param-value&amp;amp;gt;classpath:applicationContext-*.xml&amp;amp;lt;/param-value&amp;amp;gt; &amp;amp;lt;/context-param&amp;amp;gt; &amp;amp;lt;listener&amp;amp;gt; &amp;amp;lt;listener-class&amp;amp;gt;org.springframework.web.context.ContextLoaderListener&amp;amp;lt;/listener-class&amp;amp;gt; &amp;amp;lt;/listener&amp;amp;gt; &amp;amp;lt;!-- 配置Spring委派过滤器代理(要求Spring容器中有了个b</description>
    </item>
    <item>
      <title>CAS系统实现MySQL登录验证的配置 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/CAS%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0MySQL%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E7%9A%84%E9%85%8D%E7%BD%AE--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:47:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/CAS%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0MySQL%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E7%9A%84%E9%85%8D%E7%BD%AE--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>现在咱们开发环境搭好了就一切好办了 只需要增加两个类，修改两个配置文件就ok了 第一个类，登录验证类 类里面用到了 com.mysql.jdbc.Driver，所以你们懂得，记得在pom里面加入对mysql驱动的依赖，上一篇里提到过了 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27</description>
    </item>
    <item>
      <title>Shiro集成CAS认证与Pac4j配置 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/Shiro%E9%9B%86%E6%88%90CAS%E8%AE%A4%E8%AF%81%E4%B8%8EPac4j%E9%85%8D%E7%BD%AE--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:43:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/Shiro%E9%9B%86%E6%88%90CAS%E8%AE%A4%E8%AF%81%E4%B8%8EPac4j%E9%85%8D%E7%BD%AE--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>1.在pom.xml中添加： &amp;amp;lt;&amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;dependency&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;gt; &amp;amp;lt;&amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;groupId&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;gt;org.pac4j&amp;amp;lt;/&amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;groupId&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;gt; &amp;amp;lt;&amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;artifactId&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;gt;pac4j-cas&amp;amp;lt;/&amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;artifactId&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;gt; &amp;amp;lt;&amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;version&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;gt;2.1.0&amp;amp;lt;/&amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;version&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;gt; &amp;amp;lt;/&amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;dependency&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;gt; &amp;amp;lt;&amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;dependency&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;gt; &amp;amp;lt;&amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;groupId&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;gt;io.buji&amp;amp;lt;/&amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;groupId&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;gt; &amp;amp;lt;&amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;artifactId&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;gt;buji-pac4j&amp;amp;lt;/&amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;artifactId&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;gt; &amp;amp;lt;&amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;version&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;gt;3.0.0&amp;amp;lt;/&amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;version&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;gt; &amp;amp;lt;/&amp;lt;span&amp;gt;&amp;lt;strong&amp;gt;dependency&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;amp;gt; &amp;lt;span&amp;gt;2.新增Pac4jConfig.java文件&amp;lt;/span&amp;gt; &amp;lt;pre data-index=&amp;#34;5&amp;#34; name=&amp;#34;code&amp;#34;&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;br&amp;gt; 3.修改ShiroConfig.java文件 &amp;lt;span&amp;gt; 增加 &amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;pre data-index=&amp;#34;9&amp;#34; name=&amp;#34;code&amp;#34;&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;br&amp;gt; &amp;lt;span&amp;gt;修改Bean shiroFilter 方法，增加&amp;lt;/span&amp;gt;</description>
    </item>
    <item>
      <title>pac4j-cas与shiro集成框架源码分析 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/pac4j-cas%E4%B8%8Eshiro%E9%9B%86%E6%88%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:42:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/pac4j-cas%E4%B8%8Eshiro%E9%9B%86%E6%88%90%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>cas client与shiro集成框架pac4j源码分析 一、前言 二、安全过滤器 三、CallbackFilter 四、LogoutFilter 一、前言 pac4j-cas关键filter有3个，分别为io.buji.pac4j.filter.SecurityFilter、io.buji.p</description>
    </item>
    <item>
      <title>JFinal最强集成方案 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/JFinal%E6%9C%80%E5%BC%BA%E9%9B%86%E6%88%90%E6%96%B9%E6%A1%88--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:40:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/JFinal%E6%9C%80%E5%BC%BA%E9%9B%86%E6%88%90%E6%96%B9%E6%A1%88--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>JFinal最强集成方案 Jifnal+Shiro+Pac4j+Cas+Redis 简介 CAS Pac4J 集成配置 Jifnal+Shiro+Pac4j+Cas+Redis 简介 公司以前使用了Jifnal做了一个基础后台管理系统,主要使用了Jifnal+Shiro进行开发.随后交由我 进行后续的升级以及功能的完善.由于jfinal和shiro集成的时候默认使用的Ehcache对集群部署以 及分布式部署会出问题,</description>
    </item>
    <item>
      <title>Cas与Shiro集成实现单点登录的代码实现及数据流转过程 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/Cas%E4%B8%8EShiro%E9%9B%86%E6%88%90%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%B5%81%E8%BD%AC%E8%BF%87%E7%A8%8B--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:39:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/Cas%E4%B8%8EShiro%E9%9B%86%E6%88%90%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%B5%81%E8%BD%AC%E8%BF%87%E7%A8%8B--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>前言 上一篇文章介绍了 cas 环境搭建过程 本文介绍下cas和shiro集成代码实现及数据流转过程简介 先看下实现的效果 1 2 3 访问 http://localhost:8086/demo1 转发到认证中心 1 2 3 输入登陆账号 回到demo1页面 1 2 3 再次访问 http://localhost:8086/demo1 直接会跳转到 demo1页面 点击退出 项目启动[按照运行顺序] 实例化 LifecycleBeanPostProcessor bean生命周期管理类 1 使用</description>
    </item>
    <item>
      <title>shiro、cas、pac4j 实现单点登陆（1） --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/shirocaspac4j-%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E9%99%861--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:37:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/shirocaspac4j-%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E9%99%861--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>开发者社区 云计算 文章 正文 2022-04-23 191 版权 简介： shiro、cas、pac4j 实现单点登陆（1） 前言 &amp;lt;span&amp;gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span&amp;gt;上一篇文章介绍了 cas 环境搭建过程 &amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;s</description>
    </item>
    <item>
      <title>CAS和Shiro集成代码实现及数据流转过程简介 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/Cas%E5%92%8CShiro%E9%9B%86%E6%88%90%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%B5%81%E8%BD%AC%E8%BF%87%E7%A8%8B%E7%AE%80%E4%BB%8B--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:36:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/Cas%E5%92%8CShiro%E9%9B%86%E6%88%90%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8F%8A%E6%95%B0%E6%8D%AE%E6%B5%81%E8%BD%AC%E8%BF%87%E7%A8%8B%E7%AE%80%E4%BB%8B--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>平凡人笔记 于 2020-06-11 18:04:40 发布 前言 上一篇文章介绍了 cas 环境搭建过程 本文介绍下cas和shiro集成代码实现及数据流转过程简介 先看下实现的效果 1 2 3 访问 http://localhost:8086/demo1 转发到认证中心 1 2 3 输入登陆账号 回到demo1页面 1 2 3 再次访问 http://localhost:8086/demo1 直接会跳转到 demo1页面 点击退出 项目启动[按照运行顺序] 实例化 LifecycleBeanPostProcessor bean</description>
    </item>
    <item>
      <title>shiro、cas、pac4j 实现单点登陆 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/shirocaspac4j-%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E9%99%86--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:33:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/shirocaspac4j-%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E9%99%86--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>shiro、cas、pac4j 实现单点登陆 0.0782020.06.11 18:02:54字数 38阅读 768 前言 1 上一篇文章介绍了 cas 环境搭建过程本文介绍下cas和shiro集成代码实现及数据流转过程简介 先看下实现的效果 1 访问 http://localhost:8086/demo1转发到认证中心 1 再次访问 http://localhost:8086/demo1 直接会跳转</description>
    </item>
    <item>
      <title>Shiro安全配置 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/Shiro%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:32:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/Shiro%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>package com.carl.wolf.permission.config; import io.buji.pac4j.filter.CallbackFilter; import io.buji.pac4j.filter.LogoutFilter; import io.buji.pac4j.filter.SecurityFilter; import io.buji.pac4j.realm.Pac4jRealm; import io.buji.pac4j.subject.Pac4jSubjectFactory; import org.apache.shiro.mgt.DefaultSecurityManager; import org.apache.shiro.mgt.SecurityManager; import org.apache.shiro.mgt.SubjectFactory; import org.apache.shiro.realm.Realm; import org.apache.shiro.spring.web.ShiroFilterFactoryBean; import org.apache.shiro.spring.web.config.AbstractShiroWebFilterConfiguration; import org.apache.shiro.spring.web.config.DefaultShiroFilterChainDefinition; import org.apache.shiro.spring.web.config.ShiroFilterChainDefinition; import org.pac4j.cas.client.CasClient; import org.pac4j.cas.client.rest.CasRestFormClient; import org.pac4j.cas.config.CasConfiguration; import org.pac4j.cas.config.CasProtocol; import org.pac4j.core.client.Clients; import org.pac4j.core.config.Config; import org.pac4j.http.client.direct.ParameterClient; import org.pac4j.jwt.config.encryption.SecretEncryptionConfiguration; import org.pac4j.jwt.config.signature.SecretSignatureConfiguration; import org.pac4j.jwt.credentials.authenticator.JwtAuthenticator; import org.pac4j.jwt.profile.JwtGenerator; import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import javax.servlet.Filter; import java.util.HashMap; import java.util.Map; /** * 对shiro的安全配置，是对cas的登录策略进行配置 * * @author Carl * @date 2017/9/16 * @since 1.0.0 */ @Configuration public class ShiroConfiguration extends AbstractShiroWebFilterConfiguration { &amp;lt;br&amp;gt; @Value``(``&amp;quot;#{ @environment[&#39;cas.prefixUrl&#39;] ?: null }&amp;quot;``) private String prefixUrl; @Value``(``&amp;quot;#{ @environment[&#39;cas.loginUrl&#39;] ?: null }&amp;quot;``) private String casLoginUrl; @Value``(``&amp;quot;#{ @environment[&#39;cas.callbackUrl&#39;] ?: null }&amp;quot;``) private String callbackUrl; @Value``(``&amp;quot;${jwt.salt}&amp;quot;``) private String salt; @Bean public Realm</description>
    </item>
    <item>
      <title>从Shiro-cas切换pac4j的配置过程 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/%E4%BB%8EShiro-cas%E5%88%87%E6%8D%A2pac4j%E7%9A%84%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:31:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/%E4%BB%8EShiro-cas%E5%88%87%E6%8D%A2pac4j%E7%9A%84%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>从Shiro-cas切换pac4j 开发 1060 切换原因 在shiro-1.3.x以后的版本中,shiro-cas包里面的所有类都被标识为deprecated,详细: https://github.com/apache/shiro/pull/33。 个人认为不继续维护shiro-cas而切换到</description>
    </item>
    <item>
      <title>springboot&#43;cas&#43;shiro&#43;pac4j实现单点登录问题 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/springboot&#43;cas&#43;shiro&#43;pac4j%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E9%97%AE%E9%A2%98--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:29:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/springboot&#43;cas&#43;shiro&#43;pac4j%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E9%97%AE%E9%A2%98--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>前景提要 springboot+cas+shiro+pac4j实现单点登录，但是登出有问题，服务端退出了，客户端还是登录状态！ 0 [待解决问题] 之前没在shiroConfig里加public FilterRegistrationBean singleSignOutFilter() ；可以实现单点登录，登出有问题，家里这个方法后，启动报错： java.lang.IllegalArgumentException: casServerUrlPrefix cannot be null. at org.jasig.cas.client.util.CommonUtils.assertNotNull(CommonUtils.java:87) at org.jasig.cas.client.session.SingleSignOutHandler.init(SingleSignOutHandler.java:130) at org.jasig.cas.client.session.SingleSignOutFilter.init(SingleSignOutFilter.java:54) &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip; package com.audaque.gm.config; import com.audaque.gm.modules.sys.shiro.ShiroPermsFilterFactoryBean;</description>
    </item>
    <item>
      <title>SpringBoot中Shiro使用Pac4j集成CAS认证 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/SpringBoot%E4%B8%ADShiro%E4%BD%BF%E7%94%A8Pac4j%E9%9B%86%E6%88%90CAS%E8%AE%A4%E8%AF%81--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:28:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/SpringBoot%E4%B8%ADShiro%E4%BD%BF%E7%94%A8Pac4j%E9%9B%86%E6%88%90CAS%E8%AE%A4%E8%AF%81--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>SpringBoot中Shiro使用Pac4j集成CAS认证 Pac4j 简介 Pac4j与Shiro，Spring Security一样都是权限框架，并且提供了OAuth - SAML - CAS - OpenID Connect - HTTP - OpenID - Google App Engine - Kerberos (SPNEGO) 的认证集成。且可&amp;hellip; pac4j探索（一）之buji-pac4j 、facebo</description>
    </item>
    <item>
      <title>配置pac4j集成CAS实现单点登录 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/%E9%85%8D%E7%BD%AEpac4j%E9%9B%86%E6%88%90CAS%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:27:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/%E9%85%8D%E7%BD%AEpac4j%E9%9B%86%E6%88%90CAS%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 &amp;gt;[font=-apple-system, system-ui, Segoe UI, Helvetica, Arial, sans-serif][color=#24292e][b][/b][/color][/font][/align][align=left][font=-apple-system, system-ui, Segoe UI, Helvetica, Arial, sans-serif][color=#24292e][b]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;dependency&amp;gt;[/b][/color][/font][/align][align=left][font=-apple-system, system-ui, Segoe UI, Helvetica, Arial, sans-serif][color=#24292e][b]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;groupId&amp;gt;org.pac4j&amp;lt;/groupId&amp;gt;[/b][/color][/font][/align][align=left][font=-apple-system, system-ui, Segoe UI, Helvetica, Arial, sans-serif][color=#24292e][b]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;artifactId&amp;gt;pac4j-cas&amp;lt;/artifactId&amp;gt;[/b][/color][/font][/align][align=left][font=-apple-system, system-ui, Segoe UI, Helvetica, Arial, sans-serif][color=#24292e][b]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;version&amp;gt;3.8.3&amp;lt;/version&amp;gt;[/b][/color][/font][/align][align=left][font=-apple-system, system-ui, Segoe UI, Helvetica, Arial, sans-serif][color=#24292e][b]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/dependency&amp;gt;[/b][/color][/font][/align][align=left][font=-apple-system, system-ui, Segoe UI, Helvetica, Arial, sans-serif][color=#24292e][b][/b][/color][/font][/align][align=left][font=-apple-system, system-ui, Segoe UI, Helvetica, Arial, sans-serif][color=#24292e][b]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;dependency&amp;gt;[/b][/color][/font][/align][align=left][font=-apple-system, system-ui, Segoe UI, Helvetica, Arial, sans-serif][color=#24292e][b]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;groupId&amp;gt;io.buji&amp;lt;/groupId&amp;gt;[/b][/color][/font][/align][align=left][font=-apple-system, system-ui, Segoe UI, Helvetica, Arial, sans-serif][color=#24292e][b]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;artifactId&amp;gt;buji-pac4j&amp;lt;/artifactId&amp;gt;[/b][/color][/font][/align][align=left][font=-apple-system, system-ui, Segoe UI,</description>
    </item>
    <item>
      <title>探索SSO-Shiro-CAS：一站式身份验证解决方案 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/%E6%8E%A2%E7%B4%A2SSO-Shiro-CAS%E4%B8%80%E7%AB%99%E5%BC%8F%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:20:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/%E6%8E%A2%E7%B4%A2SSO-Shiro-CAS%E4%B8%80%E7%AB%99%E5%BC%8F%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>gitblog_00015 于 2024-04-18 09:40:01 发布 探索SSO-Shiro-CAS：一站式身份验证解决方案 项目地址:https://gitcode.com/tinybyhuang/sso-shiro-cas 本文将介绍一个开源项目SSO-Shiro-CAS，这是一个基于Apache Shiro和CAS实现的单点登录（Sin</description>
    </item>
    <item>
      <title>Pac4j CAS集成与Shiro的配置教程 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240428/Pac4j-CAS%E9%9B%86%E6%88%90%E4%B8%8EShiro%E7%9A%84%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Sun, 28 Apr 2024 06:17:08 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240428/Pac4j-CAS%E9%9B%86%E6%88%90%E4%B8%8EShiro%E7%9A%84%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>简介： Pac4j 简介 Pac4j与Shiro，Spring Security一样都是权限框架，并且提供了OAuth - SAML - CAS - OpenID Connect - HTTP - OpenID - Google App Engine - Kerberos (SPNEGO) 的认证集成。且可以和shiro,security等权限框架集成。 Pac4j CAS认证流程 0_5988974176867581 代码 关键部分 说明: pac4j-cas与shiro的集成是通过</description>
    </item>
    <item>
      <title>基于buji-pac4j和CAS实现单点登录示例 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240424/%E5%9F%BA%E4%BA%8Ebuji-pac4j%E5%92%8CCAS%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E7%A4%BA%E4%BE%8B--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Wed, 24 Apr 2024 11:31:05 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240424/%E5%9F%BA%E4%BA%8Ebuji-pac4j%E5%92%8CCAS%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E7%A4%BA%E4%BE%8B--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>VIP文章 H阿布 于 2018-02-01 18:22:35 发布 在pac4j探索的上一篇文章大致讲述了一下buji-pac4j+CAS的认证流程。这里记录一下本人实现的最简单的单点登录，仅作为笔记、学习交流之用，戳这里获取本文源码。 一、项目框架 1、 buji-pac4j（v.3.0.0） 2、shiro (v.1.4.0) 3、spring</description>
    </item>
    <item>
      <title>单点登录配置问题 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240424/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Wed, 24 Apr 2024 11:30:05 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240424/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>之前没在shiroConfig里加public FilterRegistrationBean singleSignOutFilter() ；可以实现单点登录，登出有问题，家里这个方法后，启动报错： java.lang.IllegalArgumentException: casServerUrlPrefix cannot be null. at org.jasig.cas.client.util.CommonUtils.assertNotNull(CommonUtils.java:87) at org.jasig.cas.client.session.SingleSignOutHandler.init(SingleSignOutHandler.java:130) at org.jasig.cas.client.session.SingleSignOutFilter.init(SingleSignOutFilter.java:54) &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip; package com.audaque.gm.config; import com.audaque.gm.modules.sys.shiro.ShiroPermsFilterFactoryBean; import com.audaque.gm.modules.sys.shiro.UserFilter; import com.audaque.gm.modules.sys.shiro.UserPermFilter; import com.audaque.gm.modules.sys.sso.CallbackFilter; import com.audaque.gm.modules.sys.sso.CasRealm; import com.audaque.gm.support.shiro.listener.UserSessionListener; import com.audaque.gm.support.shiro.session.UserSessionDAO; import com.audaque.gm.support.shiro.session.UserSessionFactory; import io.buji.pac4j.filter.LogoutFilter; import io.buji.pac4j.filter.SecurityFilter; import io.buji.pac4j.subject.Pac4jSubjectFactory; import org.apache.shiro.mgt.SecurityManager; import org.apache.shiro.session.SessionListener; import org.apache.shiro.session.mgt.SessionManager; import org.apache.shiro.session.mgt.eis.MemorySessionDAO; import org.apache.shiro.session.mgt.eis.SessionDAO; import org.apache.shiro.spring.LifecycleBeanPostProcessor; import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor; import org.apache.shiro.spring.web.ShiroFilterFactoryBean; import org.apache.shiro.web.mgt.DefaultWebSecurityManager; import org.apache.shiro.web.servlet.SimpleCookie; import org.apache.shiro.web.session.mgt.DefaultWebSessionManager; import org.jasig.cas.client.session.SingleSignOutFilter; import org.jasig.cas.client.session.SingleSignOutHttpSessionListener; import org.pac4j.core.config.Config; import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.web.servlet.FilterRegistrationBean; import org.springframework.boot.web.servlet.ServletListenerRegistrationBean; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.DependsOn; import org.springframework.core.Ordered; import org.springframework.core.annotation.Order; import org.springframework.stereotype.Component; import org.springframework.web.filter.DelegatingFilterProxy;</description>
    </item>
    <item>
      <title>集成Shiro框架实现单点登录CAS --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240424/%E9%9B%86%E6%88%90Shiro%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95CAS--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Wed, 24 Apr 2024 11:29:05 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240424/%E9%9B%86%E6%88%90Shiro%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95CAS--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>1.介绍 单点登录：Single Sign On,简称SSO，SSO使得在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。 CAS框架：CAS（Central Authentication Service）是实现SSO单点登录的框架。 分析： 1.图中用户访问cas客户端； 2.需要登录时，重定向到Cas-S</description>
    </item>
  </channel>
</rss>
