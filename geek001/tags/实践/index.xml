<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>实践 on 知识铺的博客</title>
    <link>https://index.zshipu.com/geek001/tags/%E5%AE%9E%E8%B7%B5/</link>
    <description>Recent content in 实践 on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 01 Aug 2024 05:39:32 +0000</lastBuildDate>
    <atom:link href="https://index.zshipu.com/geek001/tags/%E5%AE%9E%E8%B7%B5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>架构师必备：DDD之落地实践 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240730/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%BF%85%E5%A4%87DDD%E4%B9%8B%E8%90%BD%E5%9C%B0%E5%AE%9E%E8%B7%B5--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Thu, 01 Aug 2024 05:39:32 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240730/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%BF%85%E5%A4%87DDD%E4%B9%8B%E8%90%BD%E5%9C%B0%E5%AE%9E%E8%B7%B5--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>领域驱动设计（DDD）入门指南 引言在软件开发过程中，我们常常遇到一些棘手的问题，尤其是在维护和扩展大型系统时。传统的三层架构虽然常见，但它存在诸多不足，例如： 面向数据而非面向对象的建模方式- 过程编程而非面向对象编程- 服务层代码冗长且难以维护- 代码高耦合，难以应对变化- 业务逻辑难以</description>
    </item>
  </channel>
</rss>
