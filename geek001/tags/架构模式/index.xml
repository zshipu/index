<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>架构模式 on 知识铺的博客</title>
    <link>https://index.zshipu.com/geek001/tags/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 架构模式 on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 01 Aug 2024 05:37:32 +0000</lastBuildDate>
    <atom:link href="https://index.zshipu.com/geek001/tags/%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Java持久性构建架构：模式与策略 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240730/%E4%BD%BF%E7%94%A8Java%E6%8C%81%E4%B9%85%E6%80%A7%E6%9E%84%E5%BB%BA%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E4%B8%8E%E7%AD%96%E7%95%A5--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Thu, 01 Aug 2024 05:37:32 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240730/%E4%BD%BF%E7%94%A8Java%E6%8C%81%E4%B9%85%E6%80%A7%E6%9E%84%E5%BB%BA%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E4%B8%8E%E7%AD%96%E7%95%A5--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>Java持久性模式与架构设计 概述在Java应用程序开发中，持久性层是至关重要的，它负责管理数据库交互和应用程序架构。本文将探讨Java持久性模式及其在构建健壮且高效的持久层中的作用。 持久性模式- Driver：负责与数据库建立连接。- Mapper：定义数据库操作的映射关系。- DAO</description>
    </item>
    <item>
      <title>DDD与CQRS的黄金组合 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240730/DDD%E4%B8%8ECQRS%E7%9A%84%E9%BB%84%E9%87%91%E7%BB%84%E5%90%88--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Wed, 31 Jul 2024 02:59:19 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240730/DDD%E4%B8%8ECQRS%E7%9A%84%E9%BB%84%E9%87%91%E7%BB%84%E5%90%88--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>在日常工作中，我们经常会遇到各种挑战，尤其是在系统设计和性能优化方面。以下是一些常见的问题及其背后的原因分析，以及CQRS架构的介绍和其在降低系统复杂性中的作用。 常见问题与挑战 接口性能问题 使用已有接口进行业务开发时，可能会遇到性能瓶颈，尤其是在高并发场景下。例如，如果接口全部依赖</description>
    </item>
    <item>
      <title>DDD必备架构：六边形架构 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240730/DDD%E5%BF%85%E5%A4%87%E6%9E%B6%E6%9E%84%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Wed, 31 Jul 2024 02:58:19 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240730/DDD%E5%BF%85%E5%A4%87%E6%9E%B6%E6%9E%84%E5%85%AD%E8%BE%B9%E5%BD%A2%E6%9E%B6%E6%9E%84--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>架构设计是一种艺术，它涉及对系统进行合理分解与有效整合的过程。首先，通过&amp;rsquo;分离关注点&amp;rsquo;的策略，将复杂的系统拆解为多个相对独立的部分，这有助于我们更清晰地理解和管理各个组成部分。接着，在明确的原则和规则的指导下，对这些分离出来的组件进行精心设计和构建，以实现</description>
    </item>
    <item>
      <title>详解DDD洋葱架构 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240730/%E8%AF%A6%E8%A7%A3DDD%E6%B4%8B%E8%91%B1%E6%9E%B6%E6%9E%84--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Wed, 31 Jul 2024 02:52:19 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240730/%E8%AF%A6%E8%A7%A3DDD%E6%B4%8B%E8%91%B1%E6%9E%B6%E6%9E%84--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>领域驱动设计（Domain-driven design，DDD）是一种软件开发方法，专注于应对复杂需求。它通过将软件实现与核心业务概念模型紧密结合，促进了对业务流程和规则的深入理解。 领域的定义 领域是指软件所涉及的业务知识范围。在DDD中，领域专家和开发人员共同构建领域模型，确保软件</description>
    </item>
  </channel>
</rss>
