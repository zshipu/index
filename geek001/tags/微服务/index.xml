<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微服务 on 知识铺的博客</title>
    <link>https://index.zshipu.com/geek001/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
    <description>Recent content in 微服务 on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 06 Aug 2024 09:20:50 +0000</lastBuildDate>
    <atom:link href="https://index.zshipu.com/geek001/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>微服务与领域驱动设计的架构实践总结 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240730/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Tue, 06 Aug 2024 09:20:50 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240730/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8E%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>软件架构的适应性与复杂性管理 一、软件复杂性概述 1. 复杂性产生的根源 在软件系统不断迭代的过程中，业务需求、技术更新和架构设计都会随之变得日益复杂。这种复杂性主要来源于软件系统持续变化的本质。简而言之，变化是软件系统永恒不变的主题。 2. 应对复杂性 为了应对这种复杂性，我们需要采取以下措施：</description>
    </item>
    <item>
      <title>年薪60W架构师解读微服务与领域驱动设计 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240730/%E5%B9%B4%E8%96%AA60W%E6%9E%B6%E6%9E%84%E5%B8%88%E5%B8%A6%E4%BD%A0%E8%AF%A6%E7%BB%86%E8%A7%A3%E8%AF%BB%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8E%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Tue, 06 Aug 2024 09:19:50 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240730/%E5%B9%B4%E8%96%AA60W%E6%9E%B6%E6%9E%84%E5%B8%88%E5%B8%A6%E4%BD%A0%E8%AF%A6%E7%BB%86%E8%A7%A3%E8%AF%BB%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8E%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>微服务架构与领域驱动设计 微服务架构和领域驱动设计是现代互联网应用开发中的两个重要概念。本文将从微服务架构的演进过程、微服务的具体实践技术，以及领域驱动设计在软件开发中的意识转变三个方面进行探讨。 一、微服务架构的演进 微服务架构的演进是一个逐步发展的过程，它从最初的单体架构开始，逐步</description>
    </item>
    <item>
      <title>后微服务时代领域驱动设计在携程国际火车票的实践 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240730/%E5%90%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%97%B6%E4%BB%A3%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%9C%A8%E6%90%BA%E7%A8%8B%E5%9B%BD%E9%99%85%E7%81%AB%E8%BD%A6%E7%A5%A8%E7%9A%84%E5%AE%9E%E8%B7%B5--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Tue, 06 Aug 2024 09:13:50 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240730/%E5%90%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%97%B6%E4%BB%A3%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%9C%A8%E6%90%BA%E7%A8%8B%E5%9B%BD%E9%99%85%E7%81%AB%E8%BD%A6%E7%A5%A8%E7%9A%84%E5%AE%9E%E8%B7%B5--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>一、领域驱动设计（DDD）概述 领域驱动设计（Domain-Driven Design，简称DDD）是一种以领域为核心的软件开发设计思想。它强调在软件设计过程中，应准确反映真实业务过程，满足业务问题域的需求。 DDD将设计过程分为两个层面： 战略设计：提炼问题域，塑造应用程序架构。 战术设</description>
    </item>
    <item>
      <title>去哪儿网架构演进：微服务与DDD的融合 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240730/%E5%8E%BB%E5%93%AA%E5%84%BF%E7%BD%91%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B%E4%B9%8B%E8%B7%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%B0%BD%E5%A4%B4%E5%8E%9F%E6%9D%A5%E6%98%AFDDD--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Tue, 06 Aug 2024 09:12:50 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240730/%E5%8E%BB%E5%93%AA%E5%84%BF%E7%BD%91%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B%E4%B9%8B%E8%B7%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%B0%BD%E5%A4%B4%E5%8E%9F%E6%9D%A5%E6%98%AFDDD--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>业务架构的演进与互联网企业的发展 架构设计理念与技术概述 架构的演进路径 业务架构的演变是一个持续的过程，它反映了企业在不同发展阶段的需求和挑战。架构的选择并非一成不变，而是需要根据企业当前的业务需求和未来的发展方向来做出最合适的决策。 1. 服务化到平台化的演进 服务化是将业务功能拆分成独立</description>
    </item>
    <item>
      <title>领域驱动设计详解：微服务拆分神器 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240730/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E8%AF%A6%E8%A7%A3%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8B%86%E5%88%86%E7%A5%9E%E5%99%A8--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Mon, 05 Aug 2024 01:27:02 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240730/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E8%AF%A6%E8%A7%A3%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8B%86%E5%88%86%E7%A5%9E%E5%99%A8--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>文章目录 一、领域驱动设计概念 1、基本概念 （1）通用语言 （2）领域设计4层模型 （3）DDD适合的场景 2、领域、子域、界限上下文 3、核心子域、支撑子域、通用子域 4、界限上下文的关系 5、领域模型的要素 - 实体、值对象、聚合 （1）实体 （2）值对象（Value Object） （3）聚合（Agg</description>
    </item>
    <item>
      <title>微服务与DDD架构模板知识分享 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240723/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8EDDD%E6%9E%B6%E6%9E%84%E6%A8%A1%E6%9D%BF%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Tue, 23 Jul 2024 14:54:24 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240723/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%8EDDD%E6%9E%B6%E6%9E%84%E6%A8%A1%E6%9D%BF%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>戳上方蓝字“Java知音”关注我 常用技术选型 反向代理：Nginx 开发框架：Spring Boot 数据库：MySQL 缓存：Redis 微服务解决方案：Spring Cloud Alibaba 注册中心：Nacos 配置中心：Nacos MQ：RocketMQ / RabbitMQ 监控报警：Prometheus OSS文件系统：Minio 志系</description>
    </item>
    <item>
      <title>深入探讨DDD在现代软件开发中的应用与挑战 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240723/%E6%B7%B1%E5%85%A5%E6%8E%A2%E8%AE%A8DDD%E5%9C%A8%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E4%B8%8E%E6%8C%91%E6%88%98--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Tue, 23 Jul 2024 08:28:27 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240723/%E6%B7%B1%E5%85%A5%E6%8E%A2%E8%AE%A8DDD%E5%9C%A8%E7%8E%B0%E4%BB%A3%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E4%B8%8E%E6%8C%91%E6%88%98--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>随着软件开发领域的不断进步，领域驱动设计（DDD）作为一种软件设计方法论，逐渐在业界受到重视。本文将深入探讨DDD在现代软件开发中的应用及其面临的挑战，尤其是与微服务、数字化转型等技术趋势的结合。 一、背景与现状 在业余项目和日常工作中，DDD的应有时会被搁置，但随着时间的推移，越来</description>
    </item>
    <item>
      <title>京东微服务项目中DDD的实践落地 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240710/%E4%BA%AC%E4%B8%9C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E4%B8%ADDDD%E7%9A%84%E5%AE%9E%E8%B7%B5%E8%90%BD%E5%9C%B0--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Mon, 15 Jul 2024 06:55:52 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240710/%E4%BA%AC%E4%B8%9C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E4%B8%ADDDD%E7%9A%84%E5%AE%9E%E8%B7%B5%E8%90%BD%E5%9C%B0--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>尼恩说在前面 在40岁老架构师 尼恩的读者交流群(50+)中，最近有小伙伴拿到了一线互联网企业如京东、阿里、滴滴、极兔、有赞、希音、百度、网易、美团的面试资格，遇到很多很重要的面试题： 谈谈你的DDD落地经验？ 谈谈你对DDD的理解？ 如何保证RPC代码不会腐烂，升级能力强? 微服务如何拆分</description>
    </item>
    <item>
      <title>如何利用领域驱动设计(DDD)进行微服务划分 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240710/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1DDD%E8%BF%9B%E8%A1%8C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%88%92%E5%88%86--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Mon, 15 Jul 2024 06:44:52 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240710/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1DDD%E8%BF%9B%E8%A1%8C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%88%92%E5%88%86--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>摘要 在前面一篇介绍了如何通过DDD的思想，来调整单体服务内的工程结构，为微服务的拆分做准备。同时介绍了我们在进行微服务拆分的时候踩过的一些坑。 这篇介绍下我们最终的方案，不一定对，欢迎留言讨论。 微服务划分 问题分析 上篇介绍过我们一开始的服务划分标准 一个领域一个服务的规则去拆分， 同时为</description>
    </item>
    <item>
      <title>中台与DDD结合的微服务设计策略 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240710/%E4%B8%AD%E5%8F%B0%E4%B8%8EDDD%E7%BB%93%E5%90%88%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E7%AD%96%E7%95%A5--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Mon, 15 Jul 2024 06:40:52 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240710/%E4%B8%AD%E5%8F%B0%E4%B8%8EDDD%E7%BB%93%E5%90%88%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E7%AD%96%E7%95%A5--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>众所周知，微服务架构能让系统的开发与运维管理变得简单高效，还能提高系统的可用性。随着微服务的不断流行，我们开始在自己的业务中落地微服务。 但是当实际执行时，我们才发现就算采用了微服务架构也不能解决问题，反而带来很多开发与运维上的负担。 于是我们试着去找解决方案，最后发现其实是自己划分</description>
    </item>
    <item>
      <title>微服务实施挑战与解决方案 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240710/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%96%BD%E6%8C%91%E6%88%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Mon, 15 Jul 2024 06:32:52 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240710/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%96%BD%E6%8C%91%E6%88%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>微服务实施挑战与解决方案 SEO 元描述：微服务实施遇到困难？了解如何解决服务热点、依赖问题和领域划分挑战，以提升系统效率和可扩展性。 引言 您在实施微服务时是否面临挑战？许多企业在服务热点、依赖问题和领域划分方面遇到困难。这些挑战会妨碍团队效率和系统的整体可扩展性。在本文中，我们将探讨微服</description>
    </item>
    <item>
      <title>京东微服务生产项目中的DDD落地实践 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240710/%E4%BA%AC%E4%B8%9C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%94%9F%E4%BA%A7%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84DDD%E8%90%BD%E5%9C%B0%E5%AE%9E%E8%B7%B5--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Mon, 15 Jul 2024 06:31:52 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240710/%E4%BA%AC%E4%B8%9C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%94%9F%E4%BA%A7%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84DDD%E8%90%BD%E5%9C%B0%E5%AE%9E%E8%B7%B5--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>尼恩说在前面 在40岁老架构师 尼恩的读者交流群(50+)中，最近有小伙伴拿到了一线互联网企业如京东、阿里、滴滴、极兔、有赞、希音、百度、网易、美团的面试资格，遇到很多很重要的面试题： 谈谈你的DDD落地经验？ 谈谈你对DDD的理解？ 如何保证RPC代码不会腐烂，升级能力强? 微服务如何拆分</description>
    </item>
    <item>
      <title>如何利用DDD进行微服务的划分 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240710/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8DDD%E8%BF%9B%E8%A1%8C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%88%92%E5%88%86--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Mon, 15 Jul 2024 06:30:52 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240710/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8DDD%E8%BF%9B%E8%A1%8C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%88%92%E5%88%86--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>摘要 在前面一篇介绍了如何通过DDD的思想，来调整单体服务内的工程结构，为微服务的拆分做准备。同时介绍了我们在进行微服务拆分的时候踩过的一些坑。 这篇介绍下我们最终的方案，不一定对，欢迎留言讨论。 微服务划分 问题分析 上篇介绍过我们一开始的服务划分标准 一个领域一个服务的规则去拆分， 同时为</description>
    </item>
    <item>
      <title>Spring Boot 微服务中的 API 网关实现 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240710/Spring-Boot-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E7%9A%84-API-%E7%BD%91%E5%85%B3%E5%AE%9E%E7%8E%B0--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Mon, 15 Jul 2024 06:27:52 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240710/Spring-Boot-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E7%9A%84-API-%E7%BD%91%E5%85%B3%E5%AE%9E%E7%8E%B0--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>Java Spring Boot 微服务架构中使用了哪些关键组件和设计模式？ 在 Java Spring Boot 微服务架构中，几个关键组件和设计模式对于构建可扩展、灵活且健壮的应用程序至关重要。以下是此类体系结构中使用的主要组件和设计模式： 关键部件 API 网关：充当所有客户端的单一入口点，将请求路由到适当的微服务并聚合结果。它简化了客户端交</description>
    </item>
    <item>
      <title>Java Spring Boot 微服务架构中的关键组件和设计模式 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240710/Java-Spring-Boot-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E7%BB%84%E4%BB%B6%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Mon, 15 Jul 2024 06:26:52 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240710/Java-Spring-Boot-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E7%BB%84%E4%BB%B6%E5%92%8C%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>抽象 本文探讨了 Java Spring Boot 微服务架构中使用的基本组件和设计模式，为开发人员构建可扩展、灵活且有弹性的应用程序提供了全面的指南。 Spring Boot 通过提供一系列用于构建独立生产级应用程序的工具和约定，简化了 Java 应用程序（尤其是微服务）的开发。1 微服务架构是一种方法，其中将大型应用程序分解为较小的、松散耦</description>
    </item>
    <item>
      <title>Java Spring Boot 微服务架构关键组件与设计模式 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240710/Java-Spring-Boot-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%85%B3%E9%94%AE%E7%BB%84%E4%BB%B6%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Mon, 15 Jul 2024 06:24:52 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240710/Java-Spring-Boot-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%85%B3%E9%94%AE%E7%BB%84%E4%BB%B6%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>Java Spring Boot 微服务架构中使用了哪些关键组件和设计模式？ 在 Java Spring Boot 微服务架构中，几个关键组件和设计模式对于构建可扩展、灵活且健壮的应用程序至关重要。以下是此类体系结构中使用的主要组件和设计模式： 关键部件 API 网关：充当所有客户端的单一入口点，将请求路由到适当的微服务并聚合结果。它简化了客户端交</description>
    </item>
    <item>
      <title>GraphQL 在微服务架构中的优势 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240424/GraphQL-%E5%9C%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8A%BF--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Wed, 24 Apr 2024 11:21:05 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240424/GraphQL-%E5%9C%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8A%BF--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>关于使用REST还是GraphQL来构建微服务哪个更好，一直存在争论。这两种技术都有其支持者和批评者，但当涉及微服务架构的特定需求时，GraphQL 成为明显的领先者。原因如下。 1 了解 RESTful 的关注点 虽然 REST 多年来一直是首选 API 风格，因其简单性和普遍适用性而受到赞誉，但它的局限性在微服务环境</description>
    </item>
    <item>
      <title>REST与GraphQL在微服务架构中的比较 --知识铺</title>
      <link>https://index.zshipu.com/geek001/post/20240424/REST%E4%B8%8EGraphQL%E5%9C%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%AD%E7%9A%84%E6%AF%94%E8%BE%83--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Wed, 24 Apr 2024 11:09:05 +0000</pubDate>
      <guid>https://index.zshipu.com/geek001/post/20240424/REST%E4%B8%8EGraphQL%E5%9C%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%AD%E7%9A%84%E6%AF%94%E8%BE%83--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>关于使用REST还是GraphQL来构建微服务哪个更好，一直存在争论。这两种技术都有其支持者和批评者，但当涉及微服务架构的特定需求时，GraphQL 成为明显的领先者。原因如下： RESTful 的关注点 虽然 REST 多年来一直是首选 API 风格，因其简单性和普遍适用性而受到赞誉，但它的局限性在微服务环境中变得</description>
    </item>
  </channel>
</rss>
