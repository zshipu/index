<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>知识铺 on 知识铺的博客</title>
    <link>https://index.zshipu.com/geek002/tags/%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
    <description>Recent content in 知识铺 on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 07 Nov 2024 01:32:58 +0000</lastBuildDate>
    <atom:link href="https://index.zshipu.com/geek002/tags/%E7%9F%A5%E8%AF%86%E9%93%BA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>智能聊天API知识介绍 --知识铺</title>
      <link>https://index.zshipu.com/geek002/post/202410/%E6%99%BA%E8%83%BD%E8%81%8A%E5%A4%A9API%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Thu, 07 Nov 2024 01:32:58 +0000</pubDate>
      <guid>https://index.zshipu.com/geek002/post/202410/%E6%99%BA%E8%83%BD%E8%81%8A%E5%A4%A9API%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>工作流编排对话型应用 API 对话应用支持会话持久化，可将之前的聊天记录作为上下进行回答，可适用于聊天/客服 AI 等。 基础 URL Code http://ai.995120.cn/v1 鉴权 Service API 使用 API-Key 进行鉴权。强烈建议开发者将 API-Key 存储于后端，而不是分享或存储于客户端，以避免 API-Key 泄露，防止可能造成的经济损失。 所有的 API 请求都需在 Authorization HTTP 头中包含您的 API-Ke</description>
    </item>
    <item>
      <title>拦截器：如何在方法前后进行拦截？ --知识铺</title>
      <link>https://index.zshipu.com/geek002/post/202410/%E6%8B%A6%E6%88%AA%E5%99%A8%E5%A6%82%E4%BD%95%E5%9C%A8%E6%96%B9%E6%B3%95%E5%89%8D%E5%90%8E%E8%BF%9B%E8%A1%8C%E6%8B%A6%E6%88%AA--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Tue, 29 Oct 2024 08:12:06 +0000</pubDate>
      <guid>https://index.zshipu.com/geek002/post/202410/%E6%8B%A6%E6%88%AA%E5%99%A8%E5%A6%82%E4%BD%95%E5%9C%A8%E6%96%B9%E6%B3%95%E5%89%8D%E5%90%8E%E8%BF%9B%E8%A1%8C%E6%8B%A6%E6%88%AA--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>18｜拦截器：如何在方法前后进行拦截？ 你好，我是郭屹，今天我们继续探讨手写MiniSpring的旅程。 在之前的章节中，我们使用JDK动态代理技术实现了AOP（面向切面编程），并结合了IoC容器来管理这些代理对象。这让我们能够以非侵入的方式，在业务代码运行时动态地添加诸如日志记录、</description>
    </item>
    <item>
      <title>06｜再回首：如何实现一个IoC容器？ -- 知识铺 --知识铺</title>
      <link>https://index.zshipu.com/geek002/post/202410/06%E5%86%8D%E5%9B%9E%E9%A6%96%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAIoC%E5%AE%B9%E5%99%A8--%E7%9F%A5%E8%AF%86%E9%93%BA--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Tue, 29 Oct 2024 08:08:06 +0000</pubDate>
      <guid>https://index.zshipu.com/geek002/post/202410/06%E5%86%8D%E5%9B%9E%E9%A6%96%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAIoC%E5%AE%B9%E5%99%A8--%E7%9F%A5%E8%AF%86%E9%93%BA--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>06｜再回首：如何实现一个IoC容器？ 你好，我是郭屹。 第一阶段的学习完成啦，你是不是自己也实现出了一个简单可用的IoC容器呢？如果已经完成了，欢迎你把你的实现代码放到评论区，我们一起交流讨论。 我们这一章学的IoC（Inversion of Control）是我们整个MiniSpring</description>
    </item>
    <item>
      <title>RAG预处理增强：让FastgptDify召回更多东西 Menghuan1918&#39;s Blog -- 知识铺 --知识铺</title>
      <link>https://index.zshipu.com/geek002/post/202410/RAG%E9%A2%84%E5%A4%84%E7%90%86%E5%A2%9E%E5%BC%BA%E8%AE%A9FastgptDify%E5%8F%AC%E5%9B%9E%E6%9B%B4%E5%A4%9A%E4%B8%9C%E8%A5%BF-Menghuan1918s-Blog--%E7%9F%A5%E8%AF%86%E9%93%BA--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Tue, 29 Oct 2024 07:45:06 +0000</pubDate>
      <guid>https://index.zshipu.com/geek002/post/202410/RAG%E9%A2%84%E5%A4%84%E7%90%86%E5%A2%9E%E5%BC%BA%E8%AE%A9FastgptDify%E5%8F%AC%E5%9B%9E%E6%9B%B4%E5%A4%9A%E4%B8%9C%E8%A5%BF-Menghuan1918s-Blog--%E7%9F%A5%E8%AF%86%E9%93%BA--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>目前的Fastgpt，Dify(或者其他同类产品)，目前知识库召回的本质上还是分片块的文本，召回的还是文本信息。不过，我们可以进行一些预处理，提升其召回精度的同时，使其也能同时召回将图片与公式表格等内容。 原理以及实现 已经将下文提到的所有预处理方法加到pdfdeal包里啦(需要0.</description>
    </item>
    <item>
      <title>BAAIbge-m3 高频镜知识介绍 --知识铺</title>
      <link>https://index.zshipu.com/geek002/post/202410/BAAIbge-m3-%E9%AB%98%E9%A2%91%E9%95%9C%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D--%E7%9F%A5%E8%AF%86%E9%93%BA/</link>
      <pubDate>Tue, 29 Oct 2024 07:41:06 +0000</pubDate>
      <guid>https://index.zshipu.com/geek002/post/202410/BAAIbge-m3-%E9%AB%98%E9%A2%91%E9%95%9C%E7%9F%A5%E8%AF%86%E4%BB%8B%E7%BB%8D--%E7%9F%A5%E8%AF%86%E9%93%BA/</guid>
      <description>有关更多详细信息，请参阅我们的 github 存储库： https://github.com/FlagOpen/FlagEmbedding 在这个项目中，我们引入了BGE-M3，它以其多功能性、多语言性和多粒度性而著称。 多功能：可以同时执行嵌入模型的三种常见检索功能：密集检索、多向量检索和稀疏检索。 多语言：可支持100多种工作语言。 多粒度：它能够处理不同粒度的输入，从短句子到</description>
    </item>
  </channel>
</rss>
