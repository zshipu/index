app:
  description: ''
  icon: 🤖
  icon_background: '#FFEAD5'
  mode: workflow
  name: 周报助手-html-中间处理层
  use_icon_as_answer_icon: false
kind: app
version: 0.1.3
workflow:
  conversation_variables: []
  environment_variables:
  - description: ''
    id: 4bb0f372-9a0e-4297-ad3c-cc11f7d21d8f
    name: echarts
    selector: []
    value: 1. 折线图（Line Chart）模板，适用场景：适用于对比不同类别的数值大小，如一周内每天的销售额、不同产品的销量等。 {"xAxis":{"type":"category","data":["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]},"yAxis":{"type":"value"},"series":[{"data":[820,932,901,934,1290,1330,1320],"type":"line","smooth":true,"lineStyle":{"width":2,"color":"#5470C6"},"areaStyle":{"color":"rgba(84,
      112, 198, 0.2)"}}]}   2. 饼图（Pie Chart）模板，适用场景：适用于分析趋势变化，如时间序列数据（如温度变化、股价走势）或数据的波动情况。
      {"tooltip":{"trigger":"item"},"legend":{"top":"5%","left":"center"},"series":[{"name":"Access
      From","type":"pie","radius":["40%","70%"],"avoidLabelOverlap":false,"itemStyle":{"borderRadius":10,"borderColor":"#fff","borderWidth":2},"label":{"show":false,"position":"center"},"emphasis":{"label":{"show":true,"fontSize":"20","fontWeight":"bold"}},"labelLine":{"show":false},"data":[{"value":1048,"name":"Search
      Engine"},{"value":735,"name":"Direct"},{"value":580,"name":"Email"},{"value":484,"name":"Union
      Ads"},{"value":300,"name":"Video Ads"}]}]}   3. 散点图（Scatter Plot）模板，适用场景：适用于显示不同部分在整体中的占比，如市场份额、预算分配等。
      {"xAxis":{"type":"value"},"yAxis":{"type":"value"},"series":[{"symbolSize":20,"data":[[10.0,8.04],[8.07,6.95],[13.0,7.58],[9.05,8.81],[11.0,8.33],[14.0,9.96],[6.08,7.24],[4.08,4.26]],"type":"scatter","itemStyle":{"color":"#91CC75"}}]}   4.
      堆叠柱状图（Stacked Bar Chart）模板，适用场景：适用于显示两变量之间的关系，如收入和支出之间的关系、体重与身高的关系等。 {"tooltip":{"trigger":"axis","axisPointer":{"type":"shadow"}},"legend":{},"xAxis":{"type":"category","data":["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]},"yAxis":{"type":"value"},"series":[{"name":"Direct","type":"bar","stack":"total","data":[320,302,301,334,390,330,320],"itemStyle":{"color":"#5470C6"}},{"name":"Email","type":"bar","stack":"total","data":[120,132,101,134,90,230,210],"itemStyle":{"color":"#91CC75"}},{"name":"Union
      Ads","type":"bar","stack":"total","data":[220,182,191,234,290,330,310],"itemStyle":{"color":"#EE6666"}},{"name":"Video
      Ads","type":"bar","stack":"total","data":[150,212,201,154,190,330,410],"itemStyle":{"color":"#73C0DE"}}]}  5.
      雷达图（Radar Chart）模板，适用场景：适合展示总量构成及不同部分的变化情况，如产品各渠道的销量，或年度支出中各部门的占比。 {"tooltip":{"trigger":"item"},"legend":{"data":["Allocated
      Budget","Actual Spending"]},"radar":{"indicator":[{"name":"Sales","max":6500},{"name":"Administration","max":16000},{"name":"Information
      Tech","max":30000},{"name":"Customer Support","max":38000},{"name":"Development","max":52000},{"name":"Marketing","max":25000}]},"series":[{"name":"Budget
      vs spending","type":"radar","data":[{"value":[4200,3000,20000,35000,50000,18000],"name":"Allocated
      Budget"},{"value":[5000,14000,28000,26000,42000,21000],"name":"Actual Spending"}]}]}
    value_type: string
  features:
    file_upload:
      allowed_file_extensions:
      - .JPG
      - .JPEG
      - .PNG
      - .GIF
      - .WEBP
      - .SVG
      allowed_file_types:
      - image
      allowed_file_upload_methods:
      - local_file
      - remote_url
      enabled: false
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 5
        file_size_limit: 15
        image_file_size_limit: 10
        video_file_size_limit: 100
        workflow_file_upload_limit: 10
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
        - local_file
        - remote_url
      number_limits: 3
    opening_statement: ''
    retriever_resource:
      enabled: true
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ''
      voice: ''
  graph:
    edges:
    - data:
        isInIteration: false
        sourceType: code
        targetType: iteration
      id: 1736730361523-source-1736730070532-target
      source: '1736730361523'
      sourceHandle: source
      target: '1736730070532'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: true
        iteration_id: '1736730070532'
        sourceType: iteration-start
        targetType: code
      id: 1736730070532start-source-1736815880874-target
      source: 1736730070532start
      sourceHandle: source
      target: '1736815880874'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1736730070532'
        sourceType: code
        targetType: tool
      id: 1736815880874-source-1736763671940-target
      source: '1736815880874'
      sourceHandle: source
      target: '1736763671940'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1736730070532'
        sourceType: tool
        targetType: code
      id: 1736763671940-source-1736816241778-target
      source: '1736763671940'
      sourceHandle: source
      target: '1736816241778'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: false
        sourceType: llm
        targetType: end
      id: 1736850382489-source-1736504182584-target
      source: '1736850382489'
      sourceHandle: source
      target: '1736504182584'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: iteration
        targetType: llm
      id: 1736730070532-source-1736850382489-target
      source: '1736730070532'
      sourceHandle: source
      target: '1736850382489'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: start
        targetType: tool
      id: 1736504081372-source-1736912497888-target
      source: '1736504081372'
      sourceHandle: source
      target: '1736912497888'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: code
      id: 1736912497888-source-1736730361523-target
      source: '1736912497888'
      sourceHandle: source
      target: '1736730361523'
      targetHandle: target
      type: custom
      zIndex: 0
    nodes:
    - data:
        desc: ''
        selected: false
        title: 开始
        type: start
        variables:
        - label: user_no
          max_length: 48
          options: []
          required: true
          type: text-input
          variable: user_no
        - label: type
          max_length: 48
          options: []
          required: true
          type: text-input
          variable: type
      height: 116
      id: '1736504081372'
      position:
        x: 30
        y: 274
      positionAbsolute:
        x: 30
        y: 274
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        outputs:
        - value_selector:
          - '1736850382489'
          - text
          variable: result
        selected: false
        title: 结束
        type: end
      height: 90
      id: '1736504182584'
      position:
        x: 2298
        y: 274
      positionAbsolute:
        x: 2298
        y: 274
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        error_handle_mode: terminated
        is_parallel: false
        iterator_selector:
        - '1736730361523'
        - result
        output_selector:
        - '1736816241778'
        - result
        output_type: array[string]
        parallel_nums: 10
        selected: false
        start_node_id: 1736730070532start
        title: 迭代
        type: iteration
        width: 992
      height: 148
      id: '1736730070532'
      position:
        x: 942
        y: 274
      positionAbsolute:
        x: 942
        y: 274
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 992
      zIndex: 1
    - data:
        desc: ''
        isInIteration: true
        selected: false
        title: ''
        type: iteration-start
      draggable: false
      height: 48
      id: 1736730070532start
      parentId: '1736730070532'
      position:
        x: 24
        y: 68
      positionAbsolute:
        x: 966
        y: 342
      selectable: false
      sourcePosition: right
      targetPosition: left
      type: custom-iteration-start
      width: 44
      zIndex: 1002
    - data:
        code: "import json\nfrom typing import List, Dict, Union\n\ndef main(arg1:\
          \ List[Dict[str, str]]) -> Dict[str, Union[List[Dict[str, str]], List[str]]]:\n\
          \    \"\"\"处理输入列表并返回结果，包含可能的错误信息。\"\"\"\n    errors: List[str] = []\n  \
          \  result: List[Dict[str, str]] = []\n\n    try:\n        if not isinstance(arg1,\
          \ list) or not arg1:\n            errors.append(\"Input must be a non-empty\
          \ list\")\n            return {\"result\": [{\"errors\": errors}] }\n\n\
          \        first_item = arg1[0]\n        text = first_item.get(\"text\", \"\
          \")\n\n        if not text:\n            errors.append(\"Missing 'text'\
          \ in the first item of the input list\")\n            return {\"result\"\
          : [{\"errors\": errors}] }\n\n        try:\n            json_data = json.loads(text)\n\
          \            if not isinstance(json_data, list):\n                errors.append(\"\
          JSON 必须是数组\")\n                return {\"result\": [{\"errors\": errors}]\
          \ }\n            for item in json_data:\n                if not isinstance(item,\
          \ dict) or \"description\" not in item or \"sql\" not in item:\n       \
          \             errors.append(\"JSON 数组中的每个元素必须是包含 'description' 和 'sql' 字段的字典\"\
          )\n                    return {\"result\": [{\"errors\": errors}] }\n  \
          \          result = json_data\n        except json.JSONDecodeError as e:\n\
          \            errors.append(f\"JSON 解析错误：{str(e)}\")\n            return\
          \ {\"result\": [{\"errors\": errors}] }\n\n        return {\"result\": result\
          \ }\n\n    except IndexError:\n        errors.append(\"Input list is empty\"\
          )\n        return {\"result\": [{\"errors\": errors}] }\n    except Exception\
          \ as e:\n        errors.append(str(e))\n        return {\"result\": [{\"\
          errors\": errors}] }"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: array[object]
        selected: false
        title: 提取sql语句
        type: code
        variables:
        - value_selector:
          - '1736912497888'
          - json
          variable: arg1
      height: 54
      id: '1736730361523'
      position:
        x: 638
        y: 274
      positionAbsolute:
        x: 638
        y: 274
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        isInIteration: true
        iteration_id: '1736730070532'
        provider_id: a05d3a58-b4f3-4f97-b3e9-55fe1925ba19
        provider_name: 执行sql-测试
        provider_type: api
        selected: false
        title: executeQuery
        tool_configurations: {}
        tool_label: executeQuery
        tool_name: executeQuery
        tool_parameters:
          format:
            type: mixed
            value: json
          sql:
            type: mixed
            value: '{{#1736815880874.result#}}'
        type: tool
      height: 54
      id: '1736763671940'
      parentId: '1736730070532'
      position:
        x: 428
        y: 68
      positionAbsolute:
        x: 1370
        y: 342
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
      zIndex: 1002
    - data:
        code: "def main(arg1: dict) -> dict:\n    try:\n        # 提取 SQL 字段，并去掉换行符和多余空格\n\
          \        sql = arg1.get('sql', '').replace(\"\\n\", \" \").strip()\n   \
          \     return {\n            \"result\": sql\n        }\n    except Exception\
          \ as e:\n        return {\n            \"result\": \"\"\n        }"
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1736730070532'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 清理回车换行符
        type: code
        variables:
        - value_selector:
          - '1736730070532'
          - item
          variable: arg1
      height: 54
      id: '1736815880874'
      parentId: '1736730070532'
      position:
        x: 128
        y: 68
      positionAbsolute:
        x: 1070
        y: 342
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
      zIndex: 1002
    - data:
        code: "\ndef main(arg1: str) -> dict:\n    json_obj = json.loads(arg1)\n \
          \   return {\n        \"result\": json_obj[\"data\"] ,\n    }\n"
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1736730070532'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 处理sql结果
        type: code
        variables:
        - value_selector:
          - '1736763671940'
          - text
          variable: arg1
      height: 54
      id: '1736816241778'
      parentId: '1736730070532'
      position:
        x: 732
        y: 66.57142857142856
      positionAbsolute:
        x: 1674
        y: 340.57142857142856
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
      zIndex: 1002
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: deepseek-coder
          provider: deepseek
        prompt_template:
        - id: db39f035-2872-4be4-8026-d9a901e3beba
          role: system
          text: "# Role: 健康数据可视化专家\n## 背景\n用户需要创建C端健康报告H5页面，需将原始健康数据转化为专业可视化报告。你需根据用户需求生成符合要求的HTML+CSS+JS代码。\n\
            \n## 技能\n- 精通移动端H5开发，熟悉自适应布局\n- 擅长将健康数据转化为可视化图表\n- 掌握现代UI设计趋势，能实现复杂动效\n\
            - 熟悉健康数据单位换算和合理展示规范\n\n## 处理流程\n1. 解析输入数据：\n   - 识别{{#1736730070532.output#}}中的健康参数\n\
            \   - 自动转换单位（如克→千克）\n   - 过滤无效/缺失数据\n\n2. 视觉设计：\n   - 主色调：四叶草绿(#88C0A3)+科技银(#F0F4F7)\n\
            \   - 布局结构：Header(用户信息)→Cards(关键指标)→Charts(可视化)→Footer(建议)\n   - 动态元素：四叶草旋转光效、心跳脉冲动画、数据加载过渡\n\
            \n3. 数据可视化：\n   - 心率：使用❤️图标+动态数字+背景四叶草脉动\n   - 步数：环形进度条，每2000步增加一个四叶草标记\n\
            \   - 睡眠：月亮图标配合四叶草展开程度表示睡眠质量\n\n4. 健康建议生成：\n   - 根据指标自动生成3条改善建议\n   -\
            \ 使用正向激励语言\n   - 每条建议前添加\U0001F340符号\n\n## 输出规则\n- 严格使用HTML5+CSS3+原生JS\n\
            - 优先使用CSS动画而非JS库\n- 采用flex布局实现自适应\n- 关键数据必须有单位换算逻辑\n- 缺失数据留空处理，禁止虚构\n\
            - 添加移动端触摸友好交互\n\n## 风格要求\n- 字体：优先使用system-ui栈\n- 卡片：半透明磨砂玻璃效果\n- 图表：SVG实现可伸缩可视化\n\
            - 动效：所有过渡保持300ms内\n- 图标：使用UTF-8表情符号+CSS绘制形状\n- 头像：使用开源的头像连接库UI-Avatars\n\
            \nUI-Avatars\n特点：通过用户名称首字母生成简洁的字母头像，适合需要快速集成默认头像的场景。\n集成方式：\nAPI 调用：使用\
            \ URL 参数自定义颜色、背景和尺寸，例如 https://ui-avatars.com/api/?name={昵称}\n本地库：支持 SVG\
            \ 或 PNG 输出，轻量且跨平台兼容。\n优势：高度定制化（颜色、字体、形状），响应式设计，适合社交平台、论坛等匿名用户场景\n\n\n\
            ## 异常处理\n- 当数据异常时显示灰色占位符\n- 数值超出正常范围添加⚠️提示\n- 缺少关键参数时跳过对应模块"
        - id: 0b4b7cab-4d7d-452a-8c2a-61dd306bb4d9
          role: assistant
          text: '<div>

            {html代码片段}

            </div>'
        selected: true
        title: LLM
        type: llm
        variables: []
        vision:
          enabled: false
      height: 98
      id: '1736850382489'
      position:
        x: 1993.8937868892876
        y: 274
      positionAbsolute:
        x: 1993.8937868892876
        y: 274
      selected: true
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        provider_id: dd4a5100-c648-4813-a094-0c99b6fabb5d
        provider_name: 工作流-生成周报SQL
        provider_type: workflow
        selected: false
        title: 工作流-生成周报SQL
        tool_configurations: {}
        tool_label: 工作流-生成周报SQL
        tool_name: getUserWeekly
        tool_parameters:
          input:
            type: mixed
            value: '{{#1736504081372.type#}}'
          user_no:
            type: mixed
            value: '{{#1736504081372.user_no#}}'
        type: tool
      height: 54
      id: '1736912497888'
      position:
        x: 334
        y: 274
      positionAbsolute:
        x: 334
        y: 274
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    viewport:
      x: -882.0046987688302
      y: -31.118720978838326
      zoom: 0.8705505632961246
