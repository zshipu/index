app:
  description: ''
  icon: 🤖
  icon_background: '#FFEAD5'
  mode: workflow
  name: 日报助手
  use_icon_as_answer_icon: false
kind: app
version: 0.1.3
workflow:
  conversation_variables: []
  environment_variables:
  - description: ''
    id: 4bb0f372-9a0e-4297-ad3c-cc11f7d21d8f
    name: echarts
    selector: []
    value: 1. 折线图（Line Chart）模板，适用场景：适用于对比不同类别的数值大小，如一周内每天的销售额、不同产品的销量等。 {"xAxis":{"type":"category","data":["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]},"yAxis":{"type":"value"},"series":[{"data":[820,932,901,934,1290,1330,1320],"type":"line","smooth":true,"lineStyle":{"width":2,"color":"#5470C6"},"areaStyle":{"color":"rgba(84,
      112, 198, 0.2)"}}]}   2. 饼图（Pie Chart）模板，适用场景：适用于分析趋势变化，如时间序列数据（如温度变化、股价走势）或数据的波动情况。
      {"tooltip":{"trigger":"item"},"legend":{"top":"5%","left":"center"},"series":[{"name":"Access
      From","type":"pie","radius":["40%","70%"],"avoidLabelOverlap":false,"itemStyle":{"borderRadius":10,"borderColor":"#fff","borderWidth":2},"label":{"show":false,"position":"center"},"emphasis":{"label":{"show":true,"fontSize":"20","fontWeight":"bold"}},"labelLine":{"show":false},"data":[{"value":1048,"name":"Search
      Engine"},{"value":735,"name":"Direct"},{"value":580,"name":"Email"},{"value":484,"name":"Union
      Ads"},{"value":300,"name":"Video Ads"}]}]}   3. 散点图（Scatter Plot）模板，适用场景：适用于显示不同部分在整体中的占比，如市场份额、预算分配等。
      {"xAxis":{"type":"value"},"yAxis":{"type":"value"},"series":[{"symbolSize":20,"data":[[10.0,8.04],[8.07,6.95],[13.0,7.58],[9.05,8.81],[11.0,8.33],[14.0,9.96],[6.08,7.24],[4.08,4.26]],"type":"scatter","itemStyle":{"color":"#91CC75"}}]}   4.
      堆叠柱状图（Stacked Bar Chart）模板，适用场景：适用于显示两变量之间的关系，如收入和支出之间的关系、体重与身高的关系等。 {"tooltip":{"trigger":"axis","axisPointer":{"type":"shadow"}},"legend":{},"xAxis":{"type":"category","data":["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]},"yAxis":{"type":"value"},"series":[{"name":"Direct","type":"bar","stack":"total","data":[320,302,301,334,390,330,320],"itemStyle":{"color":"#5470C6"}},{"name":"Email","type":"bar","stack":"total","data":[120,132,101,134,90,230,210],"itemStyle":{"color":"#91CC75"}},{"name":"Union
      Ads","type":"bar","stack":"total","data":[220,182,191,234,290,330,310],"itemStyle":{"color":"#EE6666"}},{"name":"Video
      Ads","type":"bar","stack":"total","data":[150,212,201,154,190,330,410],"itemStyle":{"color":"#73C0DE"}}]}  5.
      雷达图（Radar Chart）模板，适用场景：适合展示总量构成及不同部分的变化情况，如产品各渠道的销量，或年度支出中各部门的占比。 {"tooltip":{"trigger":"item"},"legend":{"data":["Allocated
      Budget","Actual Spending"]},"radar":{"indicator":[{"name":"Sales","max":6500},{"name":"Administration","max":16000},{"name":"Information
      Tech","max":30000},{"name":"Customer Support","max":38000},{"name":"Development","max":52000},{"name":"Marketing","max":25000}]},"series":[{"name":"Budget
      vs spending","type":"radar","data":[{"value":[4200,3000,20000,35000,50000,18000],"name":"Allocated
      Budget"},{"value":[5000,14000,28000,26000,42000,21000],"name":"Actual Spending"}]}]}
    value_type: string
  features:
    file_upload:
      allowed_file_extensions:
      - .JPG
      - .JPEG
      - .PNG
      - .GIF
      - .WEBP
      - .SVG
      allowed_file_types:
      - image
      allowed_file_upload_methods:
      - local_file
      - remote_url
      enabled: false
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 5
        file_size_limit: 15
        image_file_size_limit: 10
        video_file_size_limit: 100
        workflow_file_upload_limit: 10
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
        - local_file
        - remote_url
      number_limits: 3
    opening_statement: ''
    retriever_resource:
      enabled: true
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ''
      voice: ''
  graph:
    edges:
    - data:
        isInIteration: false
        sourceType: start
        targetType: tool
      id: 1736504081372-source-1736504096737-target
      source: '1736504081372'
      sourceHandle: source
      target: '1736504096737'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: tool
        targetType: code
      id: 1736504096737-source-1736730361523-target
      source: '1736504096737'
      sourceHandle: source
      target: '1736730361523'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: iteration
      id: 1736730361523-source-1736730070532-target
      source: '1736730361523'
      sourceHandle: source
      target: '1736730070532'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: true
        iteration_id: '1736730070532'
        sourceType: iteration-start
        targetType: code
      id: 1736730070532start-source-1736815880874-target
      source: 1736730070532start
      sourceHandle: source
      target: '1736815880874'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1736730070532'
        sourceType: code
        targetType: tool
      id: 1736815880874-source-1736763671940-target
      source: '1736815880874'
      sourceHandle: source
      target: '1736763671940'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: true
        iteration_id: '1736730070532'
        sourceType: tool
        targetType: code
      id: 1736763671940-source-1736816241778-target
      source: '1736763671940'
      sourceHandle: source
      target: '1736816241778'
      targetHandle: target
      type: custom
      zIndex: 1002
    - data:
        isInIteration: false
        sourceType: llm
        targetType: end
      id: 1736850382489-source-1736504182584-target
      source: '1736850382489'
      sourceHandle: source
      target: '1736504182584'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: iteration
        targetType: code
      id: 1736730070532-source-1737366755103-target
      source: '1736730070532'
      sourceHandle: source
      target: '1737366755103'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: llm
      id: 1737366755103-source-1736850382489-target
      source: '1737366755103'
      sourceHandle: source
      target: '1736850382489'
      targetHandle: target
      type: custom
      zIndex: 0
    nodes:
    - data:
        desc: ''
        selected: false
        title: 开始
        type: start
        variables:
        - label: user_no
          max_length: 48
          options: []
          required: true
          type: text-input
          variable: user_no
        - label: type
          max_length: 48
          options: []
          required: true
          type: text-input
          variable: type
      height: 116
      id: '1736504081372'
      position:
        x: 30
        y: 274
      positionAbsolute:
        x: 30
        y: 274
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        provider_id: 903bb04e-393d-4b1b-ba4c-3f2df35bba7a
        provider_name: 工作流-生成日报SQL
        provider_type: workflow
        selected: false
        title: 工作流-生成日报SQL
        tool_configurations:
          input: 用户
          user_no: '1000114'
        tool_label: 工作流-生成日报SQL
        tool_name: getUserDaily
        tool_parameters:
          input:
            type: mixed
            value: '{{#1736504081372.type#}}'
          user_no:
            type: mixed
            value: '{{#1736504081372.user_no#}}'
        type: tool
      height: 116
      id: '1736504096737'
      position:
        x: 334
        y: 274
      positionAbsolute:
        x: 334
        y: 274
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        outputs:
        - value_selector:
          - '1736850382489'
          - text
          variable: result
        selected: false
        title: 结束
        type: end
      height: 90
      id: '1736504182584'
      position:
        x: 2598
        y: 274
      positionAbsolute:
        x: 2598
        y: 274
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        error_handle_mode: remove-abnormal-output
        is_parallel: false
        iterator_selector:
        - '1736730361523'
        - result
        output_selector:
        - '1736816241778'
        - result
        output_type: array[string]
        parallel_nums: 10
        selected: false
        start_node_id: 1736730070532start
        title: 迭代
        type: iteration
        width: 992
      height: 148
      id: '1736730070532'
      position:
        x: 942
        y: 274
      positionAbsolute:
        x: 942
        y: 274
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 992
      zIndex: 1
    - data:
        desc: ''
        isInIteration: true
        selected: false
        title: ''
        type: iteration-start
      draggable: false
      height: 48
      id: 1736730070532start
      parentId: '1736730070532'
      position:
        x: 24
        y: 68
      positionAbsolute:
        x: 966
        y: 342
      selectable: false
      sourcePosition: right
      targetPosition: left
      type: custom-iteration-start
      width: 44
      zIndex: 1002
    - data:
        code: "import json\nfrom typing import List, Dict, Union\n\ndef main(arg1:\
          \ List[Dict[str, str]]) -> Dict[str, Union[List[Dict[str, str]], List[str]]]:\n\
          \    \"\"\"处理输入列表并返回结果，包含可能的错误信息。\"\"\"\n    errors: List[str] = []\n  \
          \  result: List[Dict[str, str]] = []\n\n    try:\n        if not isinstance(arg1,\
          \ list) or not arg1:\n            errors.append(\"Input must be a non-empty\
          \ list\")\n            return {\"result\": [{\"errors\": errors}] }\n\n\
          \        first_item = arg1[0]\n        text = first_item.get(\"text\", \"\
          \")\n\n        if not text:\n            errors.append(\"Missing 'text'\
          \ in the first item of the input list\")\n            return {\"result\"\
          : [{\"errors\": errors}] }\n\n        try:\n            json_data = json.loads(text)\n\
          \            if not isinstance(json_data, list):\n                errors.append(\"\
          JSON 必须是数组\")\n                return {\"result\": [{\"errors\": errors}]\
          \ }\n            for item in json_data:\n                if not isinstance(item,\
          \ dict) or \"description\" not in item or \"sql\" not in item:\n       \
          \             errors.append(\"JSON 数组中的每个元素必须是包含 'description' 和 'sql' 字段的字典\"\
          )\n                    return {\"result\": [{\"errors\": errors}] }\n  \
          \          result = json_data\n        except json.JSONDecodeError as e:\n\
          \            errors.append(f\"JSON 解析错误：{str(e)}\")\n            return\
          \ {\"result\": [{\"errors\": errors}] }\n\n        return {\"result\": result\
          \ }\n\n    except IndexError:\n        errors.append(\"Input list is empty\"\
          )\n        return {\"result\": [{\"errors\": errors}] }\n    except Exception\
          \ as e:\n        errors.append(str(e))\n        return {\"result\": [{\"\
          errors\": errors}] }"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: array[object]
        selected: false
        title: 提取sql语句
        type: code
        variables:
        - value_selector:
          - '1736504096737'
          - json
          variable: arg1
      height: 54
      id: '1736730361523'
      position:
        x: 638
        y: 274
      positionAbsolute:
        x: 638
        y: 274
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        isInIteration: true
        iteration_id: '1736730070532'
        provider_id: a05d3a58-b4f3-4f97-b3e9-55fe1925ba19
        provider_name: 执行sql-测试
        provider_type: api
        selected: false
        title: executeQuery
        tool_configurations: {}
        tool_label: executeQuery
        tool_name: executeQuery
        tool_parameters:
          format:
            type: mixed
            value: json
          sql:
            type: mixed
            value: '{{#1736815880874.result#}}'
        type: tool
      height: 54
      id: '1736763671940'
      parentId: '1736730070532'
      position:
        x: 428
        y: 68
      positionAbsolute:
        x: 1370
        y: 342
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
      zIndex: 1002
    - data:
        code: "def main(arg1: dict) -> dict:\n    try:\n        # 提取 SQL 字段，并去掉换行符和多余空格\n\
          \        sql = arg1.get('sql', '').replace(\"\\n\", \" \").strip()\n   \
          \     return {\n            \"result\": sql\n        }\n    except Exception\
          \ as e:\n        return {\n            \"result\": \"\"\n        }"
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1736730070532'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 清理回车换行符
        type: code
        variables:
        - value_selector:
          - '1736730070532'
          - item
          variable: arg1
      height: 54
      id: '1736815880874'
      parentId: '1736730070532'
      position:
        x: 128
        y: 68
      positionAbsolute:
        x: 1070
        y: 342
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
      zIndex: 1002
    - data:
        code: "import json\n\ndef main(arg1: str) -> dict:\n    json_obj = json.loads(arg1)\n\
          \    if json_obj[\"data\"] is None:\n        raise ValueError(\"Data is\
          \ null\")\n    return {\n        \"result\": json_obj[\"data\"] ,\n    }"
        code_language: python3
        desc: ''
        isInIteration: true
        iteration_id: '1736730070532'
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 处理sql结果
        type: code
        variables:
        - value_selector:
          - '1736763671940'
          - text
          variable: arg1
      height: 54
      id: '1736816241778'
      parentId: '1736730070532'
      position:
        x: 732
        y: 66.57142857142856
      positionAbsolute:
        x: 1674
        y: 340.57142857142856
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
      zIndex: 1002
    - data:
        context:
          enabled: true
          variable_selector:
          - env
          - echarts
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: deepseek-coder
          provider: deepseek
        prompt_template:
        - id: db39f035-2872-4be4-8026-d9a901e3beba
          role: system
          text: "#需求\n我需要设计一个面向C端用户的健康数据大屏系统，用于展示用户的健康数据<--{{#1737366755103.result#}}-->。请根据以下需求生成多个详细的echarts配置。\n\
            认真学习echarts配置：{{#context#}}\n最高级风险注意：这个echarts模板配置内是模拟数据，一定不能展示给用户。一定要使用真实数据生成，没有数据就不生成。\n\
            \n# 注意\n1. 不要少于上下文提供的数组数据。\n2. 除非数组没有数据，跳过。\n3. 未知数据就不生成echarts配置。\n4.\
            \ **数据展示的合理性**：\n   - 数据展示需要合理，特别是有些用户特征数据，要考虑单位，比如体重，60000，需要判断出合理的单位是克。个人信息也需要考虑展示的合理性。\n\
            5. **配色方案**：\n   - 采用现代、炫酷的配色，同时兼容白天和夜间模式。\n   - 图表主色调自由发挥你做为UI设计大师的水平。\n\
            6. **图表类型**：\n   -  根据数据，使用合适的图表生成\n7. 数据节点数值展示出来。\n8. 严格要求数据的准确性，不存在的数据不要造。\n\
            \n# 要求\n请根据以上需求，生成详细的 ECharts 配置代码,只需要输出多个ECharts配置代码，不需要输出其他任何描述性的文本。\n\
            \n# 最后：健康总结\n你现在作为一个大健康领域的专家，根据用户的健康数据,进行一段健康总结。健康建议、作息、食谱等。让用户根据他的健康总结，有动力行动起来。/"
        - id: 0b4b7cab-4d7d-452a-8c2a-61dd306bb4d9
          role: assistant
          text: '```echarts

            {echarts 配置代码}

            ```

            ```echarts

            {echarts 配置代码}

            ```

            昨日总结：{健康总结}

            '
        selected: true
        title: LLM
        type: llm
        variables: []
        vision:
          enabled: false
      height: 98
      id: '1736850382489'
      position:
        x: 2294
        y: 274
      positionAbsolute:
        x: 2294
        y: 274
      selected: true
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "\ndef main(arg1 ) -> dict:\n    # 使用列表推导式剔除 'null'\n    filtered_data\
          \ = [item for item in arg1 if item != 'null']\n    return {\n        \"\
          result\": filtered_data,\n    }\n"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: array[string]
        selected: false
        title: 代码执行 4
        type: code
        variables:
        - value_selector:
          - '1736730070532'
          - output
          variable: arg1
      height: 54
      id: '1737366755103'
      position:
        x: 1994
        y: 274
      positionAbsolute:
        x: 1994
        y: 274
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    viewport:
      x: -1277.2813058953857
      y: -22.836123519150192
      zoom: 0.9236555375410276
