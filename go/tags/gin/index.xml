<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gin on 知识铺的博客</title>
    <link>https://index.zshipu.com/go/tags/gin/</link>
    <description>Recent content in Gin on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 01 Sep 2018 12:00:00 +0000</lastBuildDate>
    <atom:link href="https://index.zshipu.com/go/tags/gin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「连载十七」用Nginx部署Go应用</title>
      <link>https://index.zshipu.com/go/posts/go/gin/2018-09-01-nginx/</link>
      <pubDate>Sat, 01 Sep 2018 12:00:00 +0000</pubDate>
      <guid>https://index.zshipu.com/go/posts/go/gin/2018-09-01-nginx/</guid>
      <description>知识点 Nginx。 反向代理。 本文目标 简单部署后端服务。 做什么 在本章节，我们将简单介绍 Nginx 以及使用 Nginx 来完成对 go-gin-example 的部署，会实现反向代理和简单负载均衡的功能。 Nginx 是什么 Nginx 是一个 Web Server，可以用作反向代理、负载均衡、邮件代理、TCP / UDP、HTTP 服务器等等，它拥有很多吸引人的特性，</description>
    </item>
    <item>
      <title>「番外」请入门 Makefile</title>
      <link>https://index.zshipu.com/go/posts/go/gin/2018-08-26-makefile/</link>
      <pubDate>Sun, 26 Aug 2018 12:00:00 +0000</pubDate>
      <guid>https://index.zshipu.com/go/posts/go/gin/2018-08-26-makefile/</guid>
      <description>知识点 写一个 Makefile 本文目标 含一定复杂度的软件工程，基本上都是先编译 A，再依赖 B，再编译 C&amp;hellip;，最后才执行构建。如果每次都人为编排，又或是每新来一个同事就问你项目 D 怎么构建、重新构建需要注意什么&amp;hellip;等等情况，岂不是要崩溃？ 我们常常会在开源项目中发现 Makefil</description>
    </item>
    <item>
      <title>「连载十六」在图片上绘制文字</title>
      <link>https://index.zshipu.com/go/posts/go/gin/2018-07-07-font/</link>
      <pubDate>Sat, 07 Jul 2018 12:00:00 +0000</pubDate>
      <guid>https://index.zshipu.com/go/posts/go/gin/2018-07-07-font/</guid>
      <description>知识点 字体库使用 图片合成 本文目标 主要实现合并后的海报上绘制文字的功能（这个需求也是常见的很了），内容比较简单。 实现 这里使用的是 微软雅黑 的字体，请点击进行下载并存放到 runtime/fonts 目录下（字体文件占 16 MB 大小） 安装 $ go get -u github.com/golang/freetype 绘制文字 打开 service/article_service/article_poster.go 文件，增加绘制文字的业务逻辑，如下： 1 2 3 4 5 6 7 8 9 10 11</description>
    </item>
    <item>
      <title>「连载十五」生成二维码、合并海报</title>
      <link>https://index.zshipu.com/go/posts/go/gin/2018-07-05-image/</link>
      <pubDate>Thu, 05 Jul 2018 12:00:00 +0000</pubDate>
      <guid>https://index.zshipu.com/go/posts/go/gin/2018-07-05-image/</guid>
      <description>知识点 图片生成 二维码生成 本文目标 在文章的详情页中，我们常常会需要去宣传它，而目前最常见的就是发海报了，今天我们将实现如下功能： 生成二维码 合并海报（背景图 + 二维码） 实现 首先，你需要在 App 配置项中增加二维码及其海报的存储路径，我们约定配置项名称为 QrCodeSavePath，值为 qrc</description>
    </item>
    <item>
      <title>「连载十四」实现导出、导入 Excel</title>
      <link>https://index.zshipu.com/go/posts/go/gin/2018-06-14-excel/</link>
      <pubDate>Thu, 14 Jun 2018 12:00:00 +0000</pubDate>
      <guid>https://index.zshipu.com/go/posts/go/gin/2018-06-14-excel/</guid>
      <description>知识点 导出功能的实现 本文目标 在本节，我们将实现对标签信息的导出、导入功能，这是很标配功能了，希望你掌握基础的使用方式。 另外在本文我们使用了 2 个 Excel 的包，excelize 最初的 XML 格式文件的一些结构，是通过 tealeg/xlsx 格式文件结构演化而来的，因此特意在此都展示了，你可以根据自己的场景和喜爱去使用</description>
    </item>
    <item>
      <title>「连载十三」优化你的应用结构和实现Redis缓存</title>
      <link>https://index.zshipu.com/go/posts/go/gin/2018-06-02-application-redis/</link>
      <pubDate>Sat, 02 Jun 2018 12:00:00 +0000</pubDate>
      <guid>https://index.zshipu.com/go/posts/go/gin/2018-06-02-application-redis/</guid>
      <description>前言 之前就在想，不少教程或示例的代码设计都是一步到位的（也没问题） 但实际操作的读者真的能够理解透彻为什么吗？左思右想，有了今天这一章的内容，我认为实际经历过一遍印象会更加深刻 本文目标 在本章节，将介绍以下功能的整理： 抽离、分层业务逻辑：减轻 routers.go 内的 api 方法的逻辑（但本文暂不分层 repo</description>
    </item>
    <item>
      <title>「连载十二」优化配置结构及实现图片上传</title>
      <link>https://index.zshipu.com/go/posts/go/gin/2018-05-27-config-upload/</link>
      <pubDate>Sun, 27 May 2018 12:00:00 +0000</pubDate>
      <guid>https://index.zshipu.com/go/posts/go/gin/2018-05-27-config-upload/</guid>
      <description>知识点 重构、调整结构 本文目标 这个应用程序跑了那么久了，越来越大，越来越壮，仿佛我们的产品一样，现在它需要进行小范围重构了，以便于后续的使用，这非常重要。 前言 一天，产品经理突然跟你说文章列表，没有封面图，不够美观，！）&amp;amp;￥！&amp;amp;）#&amp;amp;￥！加一个吧，几分钟的事 你</description>
    </item>
    <item>
      <title>「连载十一」Cron定时任务</title>
      <link>https://index.zshipu.com/go/posts/go/gin/2018-04-29-cron/</link>
      <pubDate>Sun, 29 Apr 2018 12:00:00 +0000</pubDate>
      <guid>https://index.zshipu.com/go/posts/go/gin/2018-04-29-cron/</guid>
      <description>知识点 完成定时任务的功能 本文目标 在实际的应用项目中，定时任务的使用是很常见的。你是否有过 Golang 如何做定时任务的疑问，莫非是轮询，在本文中我们将结合我们的项目讲述 Cron。 介绍 我们将使用 cron 这个包，它实现了 cron 规范解析器和任务运行器，简单来讲就是包含了定时任务所需的功能 Cron 表达式格式 字段名 是</description>
    </item>
    <item>
      <title>「连载十」定制 GORM Callbacks</title>
      <link>https://index.zshipu.com/go/posts/go/gin/2018-04-15-gorm-callback/</link>
      <pubDate>Sun, 15 Apr 2018 12:00:00 +0000</pubDate>
      <guid>https://index.zshipu.com/go/posts/go/gin/2018-04-15-gorm-callback/</guid>
      <description>涉及知识点 GORM 本文目标 GORM itself is powered by Callbacks, so you could fully customize GORM as you want GORM 本身是由回调驱动的，所以我们可以根据需要完全定制 GORM，以此达到我们的目的，如下： 注册一个新的回调 删除现有的回调 替换现有的回调 注册回调的顺序 在 GORM 中包含以上四类 Callbacks，我们结合项目选用 “替换现有的回调” 来解决一个小痛</description>
    </item>
    <item>
      <title>「番外」Golang 交叉编译</title>
      <link>https://index.zshipu.com/go/posts/go/gin/2018-03-26-cgo/</link>
      <pubDate>Mon, 26 Mar 2018 12:00:00 +0000</pubDate>
      <guid>https://index.zshipu.com/go/posts/go/gin/2018-03-26-cgo/</guid>
      <description>知识点 跨平台编译 本文目标 在 连载九 讲解构建 Scratch 镜像时，我们编译可执行文件用了另外一个形式的命令，如下： $ CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o go-gin-example . 我想你可能会有疑问，今天本文会针对这块进行讲解。 说明 我们将讲解命令各个参数的作用，希望你在阅读时，将每一项串联起来，你会发现这就是交叉编译相关的小知识 也就是 Golang 令</description>
    </item>
    <item>
      <title>「连载九」将Golang应用部署到Docker</title>
      <link>https://index.zshipu.com/go/posts/go/gin/2018-03-24-golang-docker/</link>
      <pubDate>Sat, 24 Mar 2018 12:00:00 +0000</pubDate>
      <guid>https://index.zshipu.com/go/posts/go/gin/2018-03-24-golang-docker/</guid>
      <description>涉及知识点 Go + Docker 本文目标 将我们的 go-gin-example 应用部署到一个 Docker 里，你需要先准备好如下东西： 你需要安装好 docker。 如果上外网比较吃力，需要配好镜像源。 Docker 在这里简单介绍下 Docker，建议深入学习 Docker 是一个开源的轻量级容器技术，让开发者可以打包他们的应用以及应用运行的上下文环境到一个可移植的镜</description>
    </item>
    <item>
      <title>「连载八」为它加上Swagger</title>
      <link>https://index.zshipu.com/go/posts/go/gin/2018-03-18-swagger/</link>
      <pubDate>Sun, 18 Mar 2018 12:00:00 +0000</pubDate>
      <guid>https://index.zshipu.com/go/posts/go/gin/2018-03-18-swagger/</guid>
      <description>涉及知识点 Swagger 本文目标 一个好的 API&#39;s，必然离不开一个好的API文档，如果要开发纯手写 API 文档，不存在的（很难持续维护），因此我们要自动生成接口文档。 安装 swag $ go get -u github.com/swaggo/swag/cmd/swag@v1.6.5 若 $GOROOT/bin 没有加入$PATH中，你需要执行将其可执行文件移动到$GOBIN下 mv $GOPATH/bin/swag /usr/local/go/bin 验证是否安装成功 检查 $GOBIN 下是否有 swag 文件，如</description>
    </item>
    <item>
      <title>「连载七」优雅的重启服务</title>
      <link>https://index.zshipu.com/go/posts/go/gin/2018-03-15-reload-http/</link>
      <pubDate>Thu, 15 Mar 2018 12:00:00 +0000</pubDate>
      <guid>https://index.zshipu.com/go/posts/go/gin/2018-03-15-reload-http/</guid>
      <description>知识点 信号量的了解。 应用热更新。 本文目标 在前面编写案例代码时，我相信你会想到，每次更新完代码，更新完配置文件后，就直接这么 ctrl+c 真的没问题吗，ctrl+c到底做了些什么事情呢？ 在这一节中我们简单讲述 ctrl+c 背后的信号以及如何在Gin中优雅的重启服务，也就是对 HTTP 服务进行热更新。 ctrl + c 内核在某</description>
    </item>
    <item>
      <title>「连载六」编写一个简单的文件日志</title>
      <link>https://index.zshipu.com/go/posts/go/gin/2018-02-15-log/</link>
      <pubDate>Thu, 15 Feb 2018 12:00:00 +0000</pubDate>
      <guid>https://index.zshipu.com/go/posts/go/gin/2018-02-15-log/</guid>
      <description>涉及知识点 自定义 log。 本文目标 在上一节中，我们解决了 API&amp;rsquo;s 可以任意访问的问题，那么我们现在还有一个问题，就是我们的日志，都是输出到控制台上的，这显然对于一个项目来说是不合理的，因此我们这一节简单封装log库，使其支持简单的文件日志！ 新建logging包 我们在pkg下新建loggin</description>
    </item>
    <item>
      <title>「连载五」使用 JWT 进行身份校验</title>
      <link>https://index.zshipu.com/go/posts/go/gin/2018-02-14-jwt/</link>
      <pubDate>Wed, 14 Feb 2018 12:00:00 +0000</pubDate>
      <guid>https://index.zshipu.com/go/posts/go/gin/2018-02-14-jwt/</guid>
      <description>涉及知识点 JWT 本文目标 在前面几节中，我们已经基本的完成了 API&amp;rsquo;s 的编写，但是，还存在一些非常严重的问题，例如，我们现在的 API 是可以随意调用的，这显然还不安全全，在本文中我们通过 jwt-go （GoDoc）的方式来简单解决这个问题。 下载依赖包 首先，我们下载 jwt-go 的依赖包，如下： go get -u github.com/dgrijalva/jwt-go 编写 jwt 工具包 我们需要编</description>
    </item>
    <item>
      <title>「连载四」Gin搭建Blog API&#39;s （三）</title>
      <link>https://index.zshipu.com/go/posts/go/gin/2018-02-13-api-03/</link>
      <pubDate>Tue, 13 Feb 2018 12:00:00 +0000</pubDate>
      <guid>https://index.zshipu.com/go/posts/go/gin/2018-02-13-api-03/</guid>
      <description>涉及知识点 Gin：Golang 的一个微框架，性能极佳。 beego-validation：本节采用的 beego 的表单验证库，中文文档。 gorm，对开发人员友好的 ORM 框架，英文文档 com，一个小而美的工具包。 本文目标 完成博客的文章类接口定义和编写 定义接口 本节编写文章的逻辑，我们定义一下接口吧！</description>
    </item>
    <item>
      <title>「连载三」Gin搭建Blog API&#39;s （二）</title>
      <link>https://index.zshipu.com/go/posts/go/gin/2018-02-12-api-02/</link>
      <pubDate>Mon, 12 Feb 2018 12:00:00 +0000</pubDate>
      <guid>https://index.zshipu.com/go/posts/go/gin/2018-02-12-api-02/</guid>
      <description>涉及知识点 Gin：Golang 的一个微框架，性能极佳。 beego-validation：本节采用的 beego 的表单验证库，中文文档。 gorm，对开发人员友好的 ORM 框架，英文文档 com，一个小而美的工具包。 本文目标 完成博客的标签类接口定义和编写 定义接口 本节正是编写标签的逻辑，我们想一想，一般</description>
    </item>
    <item>
      <title>「连载二」Gin搭建Blog API&#39;s （一）</title>
      <link>https://index.zshipu.com/go/posts/go/gin/2018-02-11-api-01/</link>
      <pubDate>Sun, 11 Feb 2018 12:00:00 +0000</pubDate>
      <guid>https://index.zshipu.com/go/posts/go/gin/2018-02-11-api-01/</guid>
      <description>思考 首先，在一个初始项目开始前，大家都要思考一下 程序的文本配置写在代码中，好吗？ API 的错误码硬编码在程序中，合适吗？ db 句柄谁都去Open，没有统一管理，好吗？ 获取分页等公共参数，谁都自己写一套逻辑，好吗？ 显然在较正规的项目中，这些问题的答案都是不可以，为了解决这些问题，我们挑选一款</description>
    </item>
    <item>
      <title>「连载一」Go 介绍与环境安装</title>
      <link>https://index.zshipu.com/go/posts/go/gin/2018-02-10-install/</link>
      <pubDate>Sat, 10 Feb 2018 12:00:00 +0000</pubDate>
      <guid>https://index.zshipu.com/go/posts/go/gin/2018-02-10-install/</guid>
      <description>本文目标 学会安装 Go。 知道什么是 Go。 知道什么是 Go modules。 了解 Go modules 的小历史。 学会简单的使用 Go modules。 了解 Gin，并简单跑起一个 Demo。 准备环节 安装 Go Centos 首先，根据对应的操作系统选择安装包 下载，在这里我使用的是 Centos 64 位系统，如下： 1 2 3 4 5 $ wget https://studygolang.com/dl/golang/go1.13.1.linux-amd64.tar.gz $ tar -zxvf go1.13.1.linux-amd64.tar.gz $ mv go/ /usr/local/ 配置 /etc/profile</description>
    </item>
  </channel>
</rss>
