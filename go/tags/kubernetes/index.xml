<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on 知识铺的博客</title>
    <link>https://index.zshipu.com/go/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on 知识铺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 10 May 2020 21:20:26 +0800</lastBuildDate>
    <atom:link href="https://index.zshipu.com/go/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 Go 程序调用 Kubernetes API</title>
      <link>https://index.zshipu.com/go/posts/kubernetes/2020-05-10-api/</link>
      <pubDate>Sun, 10 May 2020 21:20:26 +0800</pubDate>
      <guid>https://index.zshipu.com/go/posts/kubernetes/2020-05-10-api/</guid>
      <description>在前面的章节中，我们介绍了快速部署 Kubernetes 和应用程序的方法，接下来在本章节中我们将对 Kubernetes 的 API 进行了解，并且进行调用，这是开发人员最关注的一环之一。 因为不论是 DevOps、基础架构，又或是自愈，都需要与 Kubernetes API 直接/间接接触，因此即使在你不懂 Kubernetes 的情况下，Kubernetes API 的知识点仍然属于必</description>
    </item>
    <item>
      <title>在 Kubernetes 中部署应用程序</title>
      <link>https://index.zshipu.com/go/posts/kubernetes/2020-05-03-deployment/</link>
      <pubDate>Sun, 03 May 2020 11:05:00 +0800</pubDate>
      <guid>https://index.zshipu.com/go/posts/kubernetes/2020-05-03-deployment/</guid>
      <description>在完成了本地 Kubernetes 的快速搭建（基于 Docker）后，我们已经可以正式的使用它了。对于我们平时最常见的需求，那就是往 Kubernetes 里部署应用程序，如果你没有看过 Kubernetes 相关的知识，这时候你可能会六神无主，但问题不大，我们就可以使用最经典的 Nginx 来小试身手。 创建 Deployment 创建 nginx-deployment.yaml 文件： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description>
    </item>
    <item>
      <title>Kubernetes 本地快速启动（基于 Docker）</title>
      <link>https://index.zshipu.com/go/posts/kubernetes/2020-05-01-install/</link>
      <pubDate>Fri, 01 May 2020 11:25:52 +0800</pubDate>
      <guid>https://index.zshipu.com/go/posts/kubernetes/2020-05-01-install/</guid>
      <description>Kubernetes 在容器编排大战结束后已经在云原生中占据了明确的一席，最近几年越来越火热，目前搜索趋势： Kubernetes 的热度很明显是不断地在上涨，因此学习和使用 Kubernetes 是一件相对正确的事，同时公司大多都在往容器化上接近，在拥抱 Kubernetes，所以我们所开发的应用也总是跑在容器环境中。更甚的是，需要对接 Kubernetes API 来</description>
    </item>
  </channel>
</rss>
